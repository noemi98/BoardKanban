{
    "sourceFile": "src/assets/components/Task.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1723503211082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723579804063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom'; // Importar useParams\r\n+\r\n+export const TaskBoard = () => {\r\n+  const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+  const [tasks, setTasks] = useState([]);\r\n+\r\n+  const fetchTasks = async () => {\r\n+    try {\r\n+      const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+      setTasks(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Error obteniendo las tareas:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    fetchTasks(); // Cargar tareas al montar el componente\r\n+  }, [spaceId]);\r\n+\r\n+  return (\r\n+    <div className='p-5'>\r\n+      <h1 className=\"title\">Tareas para el espacio {spaceId}</h1>\r\n+      <div className='columns is-multiline'>\r\n+        {tasks.map((task) => (\r\n+          <div key={task.id} className='column is-one-third'>\r\n+            <div className='box'>\r\n+              <h2 className='title is-4'>{task.title}</h2>\r\n+              <p>{task.description}</p>\r\n+              <p><strong>Estado:</strong> {task.status}</p>\r\n+              <p><strong>Prioridad:</strong> {task.priority}</p>\r\n+              <p><strong>Fecha Límite:</strong> {task.limit}</p>\r\n+            </div>\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n"
                },
                {
                    "date": 1723585916415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,205 +0,0 @@\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom'; // Importar useParams\r\n-\r\n-export const TaskBoard = () => {\r\n-  const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-  const [tasks, setTasks] = useState([]);\r\n-\r\n-  const fetchTasks = async () => {\r\n-    try {\r\n-      const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-      setTasks(response.data);\r\n-    } catch (error) {\r\n-      console.error(\"Error obteniendo las tareas:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    fetchTasks(); // Cargar tareas al montar el componente\r\n-  }, [spaceId]);\r\n-\r\n-  return (\r\n-    <div className='p-5'>\r\n-      <h1 className=\"title\">Tareas para el espacio {spaceId}</h1>\r\n-      <div className='columns is-multiline'>\r\n-        {tasks.map((task) => (\r\n-          <div key={task.id} className='column is-one-third'>\r\n-            <div className='box'>\r\n-              <h2 className='title is-4'>{task.title}</h2>\r\n-              <p>{task.description}</p>\r\n-              <p><strong>Estado:</strong> {task.status}</p>\r\n-              <p><strong>Prioridad:</strong> {task.priority}</p>\r\n-              <p><strong>Fecha Límite:</strong> {task.limit}</p>\r\n-            </div>\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [tasks, setTasks] = useState([]);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [isCheckboxActive, setIsCheckboxActive] = useState({});\r\n-\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-            setIsCheckboxActive(response.data.tasks.reduce((acc, task) => {\r\n-               acc[task.id] = false; // Todos los checkboxes comienzan desactivados\r\n-               return acc;\r\n-            }, {}));\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   const categoryNames = [\"Por hacer\", \"En proceso\", \"Hecho\"];\r\n-\r\n-   const handlePlusClick = (categoryIndex) => {\r\n-      // Activa todos los checkboxes\r\n-      setIsCheckboxActive((prev) => {\r\n-         const newState = { ...prev };\r\n-         tasks.forEach(task => {\r\n-            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n-               newState[task.id] = true;\r\n-            }\r\n-         });\r\n-         return newState;\r\n-      });\r\n-   };\r\n-\r\n-   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n-      // Asigna la tarea a la categoría y desactiva el checkbox\r\n-      const selectedTask = tasks.find(task => task.id === taskId);\r\n-\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         if (!newAssignedTasks[categoryIndex]) {\r\n-            newAssignedTasks[categoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[categoryIndex].push(selectedTask);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n-      }));\r\n-   };\r\n-\r\n-   const handleTaskClick = (taskId, categoryIndex) => {\r\n-      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: true, // Activa el checkbox nuevamente\r\n-      }));\r\n-   };\r\n-\r\n-   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n-      event.preventDefault();\r\n-      // Mueve la tarea a la siguiente categoría\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n-\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         // Elimina la tarea de la categoría actual\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-\r\n-         // Añade la tarea a la siguiente categoría\r\n-         if (!newAssignedTasks[nextCategoryIndex]) {\r\n-            newAssignedTasks[nextCategoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n-         return newAssignedTasks;\r\n-      });\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className='checkbox'>\r\n-                        <input\r\n-                           type='checkbox'\r\n-                           checked={!isCheckboxActive[task.id]}\r\n-                           onChange={() => handleTaskCheckboxChange(task.id)}\r\n-                           disabled={!isCheckboxActive[task.id]}\r\n-                        />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-            </div>\r\n-            <div className=\"table-container\">\r\n-               <table className=\"table is-fullwidth\">\r\n-                  <thead>\r\n-                     <tr>\r\n-                        {categoryNames.map((name, index) => (\r\n-                           <th key={index} style={{\r\n-                              textAlign: 'center',\r\n-                              backgroundColor: 'white',\r\n-                              borderRadius: '15px',\r\n-                              boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'\r\n-                           }}>{name}</th>\r\n-                        ))}\r\n-                     </tr>\r\n-                  </thead>\r\n-                  <tbody>\r\n-                     <tr>\r\n-                        {categoryNames.map((_, categoryIndex) => (\r\n-                           <td key={categoryIndex} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                              <div className='pb-4'>\r\n-                                 <button\r\n-                                    className=\"button is-primary is-rounded is-small\"\r\n-                                    id=\"plus\"\r\n-                                    style={{ opacity: 0.7 }}\r\n-                                    onClick={() => handlePlusClick(categoryIndex)}\r\n-                                 >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </div>\r\n-\r\n-                              {assignedTasks[categoryIndex] && assignedTasks[categoryIndex].map((task, taskIndex) => (\r\n-                                 <div\r\n-                                    key={taskIndex}\r\n-                                    className='task-box-2'\r\n-                                    onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n-                                    onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n-                                 >\r\n-                                    <span className='subtitle is-6'>{task.title}</span>\r\n-                                 </div>\r\n-                              ))}\r\n-                           </td>\r\n-                        ))}\r\n-                     </tr>\r\n-                  </tbody>\r\n-               </table>\r\n-            </div>\r\n-         </div>\r\n-      </div>\r\n-   );\r\n-};\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723586025151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,34 @@\n-\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+\r\n+export const Task = ({ toggleModalOpen, activeCheckboxes, handleTaskChange, tasks }) => {\r\n+   return (\r\n+      <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+         <div className=\"box\">\r\n+            <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+            <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\">\r\n+               <span className='has-text-primary-20-invert'>+</span>\r\n+            </button>\r\n+         </div>\r\n+         <div className=\"box task-container\">\r\n+            {tasks.map((task) => (\r\n+               <div key={task.id} className='task-box'>\r\n+                  <label className=\"checkbox\">\r\n+                     <input\r\n+                        type=\"checkbox\"\r\n+                        checked={task.isChecked || false}\r\n+                        disabled={!activeCheckboxes || task.isAssigned}\r\n+                        onChange={() => handleTaskChange(task)}\r\n+                     />\r\n+                     <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                        style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                        &nbsp;{task.title}\r\n+                     </span>\r\n+                  </label>\r\n+               </div>\r\n+            ))}\r\n+         </div>\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723586153443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,19 @@\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n+import React, { useState } from 'react';\r\n+import { Modal } from './Modal';\r\n \r\n export const Task = ({ toggleModalOpen, activeCheckboxes, handleTaskChange, tasks }) => {\r\n+   const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+\r\n+   const handleTaskModalToggle = () => {\r\n+      setTaskModalOpen(!isTaskModalOpen);\r\n+   };\r\n+\r\n    return (\r\n       <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n          <div className=\"box\">\r\n             <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-            <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\">\r\n+            <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n                <span className='has-text-primary-20-invert'>+</span>\r\n             </button>\r\n          </div>\r\n          <div className=\"box task-container\">\r\n@@ -28,7 +33,22 @@\n                   </label>\r\n                </div>\r\n             ))}\r\n          </div>\r\n+         {isTaskModalOpen && (\r\n+            <Modal onClose={handleTaskModalToggle}>\r\n+               <header className=\"modal-card-head\">\r\n+                  <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                  <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+               </header>\r\n+               <section className=\"modal-card-body\">\r\n+                  {/* Contenido del modal de tareas */}\r\n+               </section>\r\n+               <footer className=\"modal-card-foot\">\r\n+                  <button className=\"button is-success\">Guardar</button>\r\n+                  <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+               </footer>\r\n+            </Modal>\r\n+         )}\r\n       </div>\r\n    );\r\n }\r\n"
                },
                {
                    "date": 1723586360564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,46 @@\n                   <p className=\"modal-card-title\">Nueva tarea</p>\r\n                   <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n                </header>\r\n                <section className=\"modal-card-body\">\r\n-                  {/* Contenido del modal de tareas */}\r\n-               </section>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+                  </section>\r\n                <footer className=\"modal-card-foot\">\r\n                   <button className=\"button is-success\">Guardar</button>\r\n                   <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n                </footer>\r\n"
                },
                {
                    "date": 1723588447404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                         </div>\r\n                      </div>\r\n                   </section>\r\n                <footer className=\"modal-card-foot\">\r\n-                  <button className=\"button is-success\">Guardar</button>\r\n+                  <button className=\"button is-success\">Guardar</button>&nbsp;\r\n                   <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n                </footer>\r\n             </Modal>\r\n          )}\r\n"
                },
                {
                    "date": 1723588519742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,15 @@\n                <section className=\"modal-card-body\">\r\n                      <div className=\"field\">\r\n                         <label className=\"label\">Título</label>\r\n                         <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n                         </div>\r\n                      </div>\r\n                      <div className=\"field\">\r\n                         <label className=\"label\">Descripción</label>\r\n                         <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n                         </div>\r\n                      </div>\r\n                      <div className='columns'>\r\n                         <div className='column is-half'>\r\n"
                },
                {
                    "date": 1723588582056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                         </div>\r\n                      </div>\r\n                   </section>\r\n                <footer className=\"modal-card-foot\">\r\n-                  <button className=\"button is-success\">Guardar</button>&nbsp;\r\n+                  <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n                   <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n                </footer>\r\n             </Modal>\r\n          )}\r\n"
                },
                {
                    "date": 1723588604619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,24 @@\n    const handleTaskModalToggle = () => {\r\n       setTaskModalOpen(!isTaskModalOpen);\r\n    };\r\n \r\n+   const handleSaveCreate = () => {\r\n+    fetch('http://localhost:3000/task', {\r\n+       method: 'POST',\r\n+       headers: {\r\n+          'Content-Type': 'application/json',\r\n+       },\r\n+       body: JSON.stringify(currentSpace),\r\n+    })\r\n+       .then(response => response.json())\r\n+       .then(data => {\r\n+          // Actualiza tu lista de spaces o maneja la actualización en el estado\r\n+          setSpaces(prevSpaces => [...prevSpaces, data]);\r\n+          setModalOpen(false);\r\n+       });\r\n+ };\r\n+\r\n    return (\r\n       <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n          <div className=\"box\">\r\n             <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n"
                },
                {
                    "date": 1723588676334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState } from 'react';\r\n import { Modal } from './Modal';\r\n \r\n-export const Task = ({ toggleModalOpen, activeCheckboxes, handleTaskChange, tasks }) => {\r\n+export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n \r\n    const handleTaskModalToggle = () => {\r\n       setTaskModalOpen(!isTaskModalOpen);\r\n"
                },
                {
                    "date": 1723588749190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,12 @@\n                </div>\r\n             ))}\r\n          </div>\r\n          {isTaskModalOpen && (\r\n-            <Modal onClose={handleTaskModalToggle}>\r\n+            <div className=\"modal is-active\">\r\n+            <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+            <div className=\"modal-card\">\r\n+\r\n                <header className=\"modal-card-head\">\r\n                   <p className=\"modal-card-title\">Nueva tarea</p>\r\n                   <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n                </header>\r\n@@ -98,9 +101,10 @@\n                <footer className=\"modal-card-foot\">\r\n                   <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n                   <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n                </footer>\r\n-            </Modal>\r\n+               </div>\r\n+               </div>\r\n          )}\r\n       </div>\r\n    );\r\n }\r\n"
                },
                {
                    "date": 1723588757517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,110 @@\n import React, { useState } from 'react';\r\n import { Modal } from './Modal';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-   const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n \r\n-   const handleTaskModalToggle = () => {\r\n-      setTaskModalOpen(!isTaskModalOpen);\r\n-   };\r\n+    const handleTaskModalToggle = () => {\r\n+        setTaskModalOpen(!isTaskModalOpen);\r\n+    };\r\n \r\n-   const handleSaveCreate = () => {\r\n-    fetch('http://localhost:3000/task', {\r\n-       method: 'POST',\r\n-       headers: {\r\n-          'Content-Type': 'application/json',\r\n-       },\r\n-       body: JSON.stringify(currentSpace),\r\n-    })\r\n-       .then(response => response.json())\r\n-       .then(data => {\r\n-          // Actualiza tu lista de spaces o maneja la actualización en el estado\r\n-          setSpaces(prevSpaces => [...prevSpaces, data]);\r\n-          setModalOpen(false);\r\n-       });\r\n- };\r\n+    const handleSaveCreate = () => {\r\n+        fetch('http://localhost:3000/task', {\r\n+            method: 'POST',\r\n+            headers: {\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+            body: JSON.stringify(currentSpace),\r\n+        })\r\n+            .then(response => response.json())\r\n+            .then(data => {\r\n+                // Actualiza tu lista de spaces o maneja la actualización en el estado\r\n+                setSpaces(prevSpaces => [...prevSpaces, data]);\r\n+                setModalOpen(false);\r\n+            });\r\n+    };\r\n \r\n-   return (\r\n-      <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-         <div className=\"box\">\r\n-            <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-            <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n-               <span className='has-text-primary-20-invert'>+</span>\r\n-            </button>\r\n-         </div>\r\n-         <div className=\"box task-container\">\r\n-            {tasks.map((task) => (\r\n-               <div key={task.id} className='task-box'>\r\n-                  <label className=\"checkbox\">\r\n-                     <input\r\n-                        type=\"checkbox\"\r\n-                        checked={task.isChecked || false}\r\n-                        disabled={!activeCheckboxes || task.isAssigned}\r\n-                        onChange={() => handleTaskChange(task)}\r\n-                     />\r\n-                     <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                        style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n-                        &nbsp;{task.title}\r\n-                     </span>\r\n-                  </label>\r\n-               </div>\r\n-            ))}\r\n-         </div>\r\n-         {isTaskModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-            <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n-            <div className=\"modal-card\">\r\n+    return (\r\n+        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n+                    <span className='has-text-primary-20-invert'>+</span>\r\n+                </button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+                {tasks.map((task) => (\r\n+                    <div key={task.id} className='task-box'>\r\n+                        <label className=\"checkbox\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={task.isChecked || false}\r\n+                                disabled={!activeCheckboxes || task.isAssigned}\r\n+                                onChange={() => handleTaskChange(task)}\r\n+                            />\r\n+                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                                &nbsp;{task.title}\r\n+                            </span>\r\n+                        </label>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+            {isTaskModalOpen && (\r\n+                <div className=\"modal is-active\">\r\n+                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+                    <div className=\"modal-card\">\r\n \r\n-               <header className=\"modal-card-head\">\r\n-                  <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                  <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n-               </header>\r\n-               <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-               <footer className=\"modal-card-foot\">\r\n-                  <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n-                  <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n-               </footer>\r\n-               </div>\r\n-               </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n+                        <header className=\"modal-card-head\">\r\n+                            <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+                        </header>\r\n+                        <section className=\"modal-card-body\">\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Título</label>\r\n+                                <div className=\"control\">\r\n+                                    <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Descripción</label>\r\n+                                <div className=\"control\">\r\n+                                    <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className='columns'>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Vencimiento</label>\r\n+                                        <div className=\"control\">\r\n+                                            <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Importancia</label>\r\n+                                        <div className=\"control\">\r\n+                                            <div className=\"select is-fullwidth is-text\">\r\n+                                                <select>\r\n+                                                    <option>Urgente</option>\r\n+                                                    <option>Alta</option>\r\n+                                                    <option>Media</option>\r\n+                                                    <option>Baja</option>\r\n+                                                </select>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </section>\r\n+                        <footer className=\"modal-card-foot\">\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n+                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+                        </footer>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+        </div>\r\n+    );\r\n }\r\n"
                },
                {
                    "date": 1723588793363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import React, { useState } from 'react';\r\n+\r\n+export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n+    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+\r\n+    const handleTaskModalToggle = () => {\r\n+        setTaskModalOpen(!isTaskModalOpen);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n+                    <span className='has-text-primary-20-invert'>+</span>\r\n+                </button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+                {tasks.map((task) => (\r\n+                    <div key={task.id} className='task-box'>\r\n+                        <label className=\"checkbox\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={task.isChecked || false}\r\n+                                disabled={!activeCheckboxes || task.isAssigned}\r\n+                                onChange={() => handleTaskChange(task)}\r\n+                            />\r\n+                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                                &nbsp;{task.title}\r\n+                            </span>\r\n+                        </label>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+            {isTaskModalOpen && (\r\n+                <div className=\"modal is-active\">\r\n+                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+                    <div className=\"modal-card\">\r\n+\r\n+                        <header className=\"modal-card-head\">\r\n+                            <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+                        </header>\r\n+                        <section className=\"modal-card-body\">\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Título</label>\r\n+                                <div className=\"control\">\r\n+                                    <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Descripción</label>\r\n+                                <div className=\"control\">\r\n+                                    <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className='columns'>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Vencimiento</label>\r\n+                                        <div className=\"control\">\r\n+                                            <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Importancia</label>\r\n+                                        <div className=\"control\">\r\n+                                            <div className=\"select is-fullwidth is-text\">\r\n+                                                <select>\r\n+                                                    <option>Urgente</option>\r\n+                                                    <option>Alta</option>\r\n+                                                    <option>Media</option>\r\n+                                                    <option>Baja</option>\r\n+                                                </select>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </section>\r\n+                        <footer className=\"modal-card-foot\">\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n+                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+                        </footer>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1723588941291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,59 @@\n import React, { useState } from 'react';\r\n+import axios from 'axios';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n     const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+    const [isEditMode, setIsEditMode] = useState(false);\r\n+    const [currentTask, setCurrentTask] = useState({\r\n+        id: null,\r\n+        title: '',\r\n+        description: '',\r\n+        dueDate: '',\r\n+        priority: 'Media'\r\n+    });\r\n \r\n     const handleTaskModalToggle = () => {\r\n         setTaskModalOpen(!isTaskModalOpen);\r\n+        if (!isTaskModalOpen) {\r\n+            setCurrentTask({\r\n+                id: null,\r\n+                title: '',\r\n+                description: '',\r\n+                dueDate: '',\r\n+                priority: 'Media'\r\n+            });\r\n+            setIsEditMode(false);\r\n+        }\r\n     };\r\n \r\n-    return (\r\n-        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n-                    <span className='has-text-primary-20-invert'>+</span>\r\n-                </button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-                {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box'>\r\n-                        <label className=\"checkbox\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={task.isChecked || false}\r\n-                                disabled={!activeCheckboxes || task.isAssigned}\r\n-                                onChange={() => handleTaskChange(task)}\r\n-                            />\r\n-                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n-                                &nbsp;{task.title}\r\n-                            </span>\r\n-                        </label>\r\n-                    </div>\r\n-                ))}\r\n-            </div>\r\n-            {isTaskModalOpen && (\r\n-                <div className=\"modal is-active\">\r\n-                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n-                    <div className=\"modal-card\">\r\n-\r\n-                        <header className=\"modal-card-head\">\r\n-                            <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n-                        </header>\r\n-                        <section className=\"modal-card-body\">\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Título</label>\r\n-                                <div className=\"control\">\r\n-                                    <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Descripción</label>\r\n-                                <div className=\"control\">\r\n-                                    <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className='columns'>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Vencimiento</label>\r\n-                                        <div className=\"control\">\r\n-                                            <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Importancia</label>\r\n-                                        <div className=\"control\">\r\n-                                            <div className=\"select is-fullwidth is-text\">\r\n-                                                <select>\r\n-                                                    <option>Urgente</option>\r\n-                                                    <option>Alta</option>\r\n-                                                    <option>Media</option>\r\n-                                                    <option>Baja</option>\r\n-                                                </select>\r\n-                                            </div>\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                            </div>\r\n-                        </section>\r\n-                        <footer className=\"modal-card-foot\">\r\n-                            <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n-                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n-                        </footer>\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { Modal } from './Modal';\r\n-\r\n-export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n-\r\n-    const handleTaskModalToggle = () => {\r\n-        setTaskModalOpen(!isTaskModalOpen);\r\n+    const handleInputChange = (e) => {\r\n+        const { name, value } = e.target;\r\n+        setCurrentTask({ ...currentTask, [name]: value });\r\n     };\r\n \r\n     const handleSaveCreate = () => {\r\n-        fetch('http://localhost:3000/task', {\r\n-            method: 'POST',\r\n-            headers: {\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-            body: JSON.stringify(currentSpace),\r\n-        })\r\n-            .then(response => response.json())\r\n-            .then(data => {\r\n-                // Actualiza tu lista de spaces o maneja la actualización en el estado\r\n-                setSpaces(prevSpaces => [...prevSpaces, data]);\r\n-                setModalOpen(false);\r\n-            });\r\n+        if (isEditMode) {\r\n+            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n+                .then(() => {\r\n+                    handleTaskModalToggle();\r\n+                    // Aquí puedes actualizar la lista de tareas localmente o refetch las tareas.\r\n+                });\r\n+        } else {\r\n+            axios.post('http://localhost:3000/tasks', currentTask)\r\n+                .then(() => {\r\n+                    handleTaskModalToggle();\r\n+                    // Aquí puedes actualizar la lista de tareas localmente o refetch las tareas.\r\n+                });\r\n+        }\r\n     };\r\n \r\n+    const handleEditTask = (task) => {\r\n+        setCurrentTask(task);\r\n+        setIsEditMode(true);\r\n+        setTaskModalOpen(true);\r\n+    };\r\n+\r\n     return (\r\n         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n                 <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n@@ -126,9 +62,9 @@\n                 </button>\r\n             </div>\r\n             <div className=\"box task-container\">\r\n                 {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box'>\r\n+                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n                         <label className=\"checkbox\">\r\n                             <input\r\n                                 type=\"checkbox\"\r\n                                 checked={task.isChecked || false}\r\n@@ -148,39 +84,50 @@\n                     <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n                     <div className=\"modal-card\">\r\n \r\n                         <header className=\"modal-card-head\">\r\n-                            <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n                             <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n                         </header>\r\n                         <section className=\"modal-card-body\">\r\n                             <div className=\"field\">\r\n                                 <label className=\"label\">Título</label>\r\n                                 <div className=\"control\">\r\n-                                    <input className=\"input is-text\" type=\"text\" placeholder=\"Título de la tarea\" />\r\n+                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n+                                        value={currentTask.title}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Título de la tarea\" />\r\n                                 </div>\r\n                             </div>\r\n                             <div className=\"field\">\r\n                                 <label className=\"label\">Descripción</label>\r\n                                 <div className=\"control\">\r\n-                                    <textarea className=\"textarea is-text\" placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n+                                        value={currentTask.description}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n                                 </div>\r\n                             </div>\r\n                             <div className='columns'>\r\n                                 <div className='column is-half'>\r\n                                     <div className=\"field\">\r\n                                         <label className=\"label\">Vencimiento</label>\r\n                                         <div className=\"control\">\r\n-                                            <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n+                                                value={currentTask.dueDate}\r\n+                                                onChange={handleInputChange}\r\n+                                                placeholder=\"Fecha de vencimiento\" />\r\n                                         </div>\r\n                                     </div>\r\n                                 </div>\r\n                                 <div className='column is-half'>\r\n                                     <div className=\"field\">\r\n                                         <label className=\"label\">Importancia</label>\r\n                                         <div className=\"control\">\r\n                                             <div className=\"select is-fullwidth is-text\">\r\n-                                                <select>\r\n+                                                <select name=\"priority\"\r\n+                                                    value={currentTask.priority}\r\n+                                                    onChange={handleInputChange}>\r\n                                                     <option>Urgente</option>\r\n                                                     <option>Alta</option>\r\n                                                     <option>Media</option>\r\n                                                     <option>Baja</option>\r\n@@ -191,9 +138,9 @@\n                                 </div>\r\n                             </div>\r\n                         </section>\r\n                         <footer className=\"modal-card-foot\">\r\n-                            <button className=\"button is-success\" onClick={handleSaveCreate}>Guardar</button>&nbsp;\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n                             <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n                         </footer>\r\n                     </div>\r\n                 </div>\r\n"
                },
                {
                    "date": 1723589141994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState } from 'react';\r\n import axios from 'axios';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n+    const {spaceId} = useParams();\r\n     const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n     const [isEditMode, setIsEditMode] = useState(false);\r\n     const [currentTask, setCurrentTask] = useState({\r\n         id: null,\r\n@@ -19,9 +20,10 @@\n                 id: null,\r\n                 title: '',\r\n                 description: '',\r\n                 dueDate: '',\r\n-                priority: 'Media'\r\n+                priority: 'Media',\r\n+                spaceId: spaceId\r\n             });\r\n             setIsEditMode(false);\r\n         }\r\n     };\r\n"
                },
                {
                    "date": 1723589150600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState } from 'react';\r\n+import { useParams } from 'react-router-dom';\r\n import axios from 'axios';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n     const {spaceId} = useParams();\r\n"
                },
                {
                    "date": 1723590036066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,20 +36,25 @@\n \r\n     const handleSaveCreate = () => {\r\n         if (isEditMode) {\r\n             axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n-                .then(() => {\r\n+                .then((response) => {\r\n+                    const updatedTask = response.data;\r\n+                    setTasks(prevTasks =>\r\n+                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n+                    );\r\n                     handleTaskModalToggle();\r\n-                    // Aquí puedes actualizar la lista de tareas localmente o refetch las tareas.\r\n                 });\r\n         } else {\r\n             axios.post('http://localhost:3000/tasks', currentTask)\r\n-                .then(() => {\r\n+                .then((response) => {\r\n+                    const newTask = response.data;\r\n+                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n                     handleTaskModalToggle();\r\n-                    // Aquí puedes actualizar la lista de tareas localmente o refetch las tareas.\r\n                 });\r\n         }\r\n     };\r\n+    \r\n \r\n     const handleEditTask = (task) => {\r\n         setCurrentTask(task);\r\n         setIsEditMode(true);\r\n"
                },
                {
                    "date": 1723590140766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import axios from 'axios';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n     const {spaceId} = useParams();\r\n+    const [tasks, setTasks] = useState([]);\r\n     const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n     const [isEditMode, setIsEditMode] = useState(false);\r\n     const [currentTask, setCurrentTask] = useState({\r\n         id: null,\r\n"
                },
                {
                    "date": 1723590245085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,17 @@\n import { useParams } from 'react-router-dom';\r\n import axios from 'axios';\r\n \r\n export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-    const {spaceId} = useParams();\r\n+    const { spaceId } = useParams();\r\n     const [tasks, setTasks] = useState([]);\r\n+    const handleTaskChange = (task) => {\r\n+        //     // Aquí podrías usar `setTasks` para actualizar el estado de las tareas\r\n+        setTasks(prevTasks => {\r\n+            return prevTasks.map(t => t.id === task.id ? task : t);\r\n+        });\r\n+    };\r\n+\r\n     const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n     const [isEditMode, setIsEditMode] = useState(false);\r\n     const [currentTask, setCurrentTask] = useState({\r\n         id: null,\r\n@@ -53,10 +60,10 @@\n                     handleTaskModalToggle();\r\n                 });\r\n         }\r\n     };\r\n-    \r\n \r\n+\r\n     const handleEditTask = (task) => {\r\n         setCurrentTask(task);\r\n         setIsEditMode(true);\r\n         setTaskModalOpen(true);\r\n"
                },
                {
                    "date": 1723590289361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+import React, { useState } from 'react';\r\n+import { useParams } from 'react-router-dom';\r\n+import axios from 'axios';\r\n+\r\n+export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n+    const { spaceId } = useParams();\r\n+    const [tasks, setTasks] = useState([]);\r\n+\r\n+    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+    const [isEditMode, setIsEditMode] = useState(false);\r\n+    const [currentTask, setCurrentTask] = useState({\r\n+        id: null,\r\n+        title: '',\r\n+        description: '',\r\n+        dueDate: '',\r\n+        priority: 'Media'\r\n+    });\r\n+\r\n+    const handleTaskModalToggle = () => {\r\n+        setTaskModalOpen(!isTaskModalOpen);\r\n+        if (!isTaskModalOpen) {\r\n+            setCurrentTask({\r\n+                id: null,\r\n+                title: '',\r\n+                description: '',\r\n+                dueDate: '',\r\n+                priority: 'Media',\r\n+                spaceId: spaceId\r\n+            });\r\n+            setIsEditMode(false);\r\n+        }\r\n+    };\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        const { name, value } = e.target;\r\n+        setCurrentTask({ ...currentTask, [name]: value });\r\n+    };\r\n+\r\n+    const handleSaveCreate = () => {\r\n+        if (isEditMode) {\r\n+            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n+                .then((response) => {\r\n+                    const updatedTask = response.data;\r\n+                    setTasks(prevTasks =>\r\n+                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n+                    );\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        } else {\r\n+            axios.post('http://localhost:3000/tasks', currentTask)\r\n+                .then((response) => {\r\n+                    const newTask = response.data;\r\n+                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        }\r\n+    };\r\n+\r\n+\r\n+    const handleEditTask = (task) => {\r\n+        setCurrentTask(task);\r\n+        setIsEditMode(true);\r\n+        setTaskModalOpen(true);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n+                    <span className='has-text-primary-20-invert'>+</span>\r\n+                </button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+                {tasks.map((task) => (\r\n+                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n+                        <label className=\"checkbox\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={task.isChecked || false}\r\n+                                disabled={!activeCheckboxes || task.isAssigned}\r\n+                                onChange={() => handleTaskChange(task)}\r\n+                            />\r\n+                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                                &nbsp;{task.title}\r\n+                            </span>\r\n+                        </label>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+            {isTaskModalOpen && (\r\n+                <div className=\"modal is-active\">\r\n+                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+                    <div className=\"modal-card\">\r\n+\r\n+                        <header className=\"modal-card-head\">\r\n+                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n+                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+                        </header>\r\n+                        <section className=\"modal-card-body\">\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Título</label>\r\n+                                <div className=\"control\">\r\n+                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n+                                        value={currentTask.title}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Título de la tarea\" />\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Descripción</label>\r\n+                                <div className=\"control\">\r\n+                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n+                                        value={currentTask.description}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className='columns'>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Vencimiento</label>\r\n+                                        <div className=\"control\">\r\n+                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n+                                                value={currentTask.dueDate}\r\n+                                                onChange={handleInputChange}\r\n+                                                placeholder=\"Fecha de vencimiento\" />\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Importancia</label>\r\n+                                        <div className=\"control\">\r\n+                                            <div className=\"select is-fullwidth is-text\">\r\n+                                                <select name=\"priority\"\r\n+                                                    value={currentTask.priority}\r\n+                                                    onChange={handleInputChange}>\r\n+                                                    <option>Urgente</option>\r\n+                                                    <option>Alta</option>\r\n+                                                    <option>Media</option>\r\n+                                                    <option>Baja</option>\r\n+                                                </select>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </section>\r\n+                        <footer className=\"modal-card-foot\">\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n+                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+                        </footer>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1723590300233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import React, { useState } from 'react';\r\n+import { useParams } from 'react-router-dom';\r\n+import axios from 'axios';\r\n+\r\n+export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n+    const { spaceId } = useParams();\r\n+\r\n+    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+    const [isEditMode, setIsEditMode] = useState(false);\r\n+    const [currentTask, setCurrentTask] = useState({\r\n+        id: null,\r\n+        title: '',\r\n+        description: '',\r\n+        dueDate: '',\r\n+        priority: 'Media'\r\n+    });\r\n+\r\n+    const handleTaskModalToggle = () => {\r\n+        setTaskModalOpen(!isTaskModalOpen);\r\n+        if (!isTaskModalOpen) {\r\n+            setCurrentTask({\r\n+                id: null,\r\n+                title: '',\r\n+                description: '',\r\n+                dueDate: '',\r\n+                priority: 'Media',\r\n+                spaceId: spaceId\r\n+            });\r\n+            setIsEditMode(false);\r\n+        }\r\n+    };\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        const { name, value } = e.target;\r\n+        setCurrentTask({ ...currentTask, [name]: value });\r\n+    };\r\n+\r\n+    const handleSaveCreate = () => {\r\n+        if (isEditMode) {\r\n+            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n+                .then((response) => {\r\n+                    const updatedTask = response.data;\r\n+                    setTasks(prevTasks =>\r\n+                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n+                    );\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        } else {\r\n+            axios.post('http://localhost:3000/tasks', currentTask)\r\n+                .then((response) => {\r\n+                    const newTask = response.data;\r\n+                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        }\r\n+    };\r\n+\r\n+\r\n+    const handleEditTask = (task) => {\r\n+        setCurrentTask(task);\r\n+        setIsEditMode(true);\r\n+        setTaskModalOpen(true);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n+                    <span className='has-text-primary-20-invert'>+</span>\r\n+                </button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+                {tasks.map((task) => (\r\n+                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n+                        <label className=\"checkbox\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={task.isChecked || false}\r\n+                                disabled={!activeCheckboxes || task.isAssigned}\r\n+                                onChange={() => handleTaskChange(task)}\r\n+                            />\r\n+                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                                &nbsp;{task.title}\r\n+                            </span>\r\n+                        </label>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+            {isTaskModalOpen && (\r\n+                <div className=\"modal is-active\">\r\n+                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+                    <div className=\"modal-card\">\r\n+\r\n+                        <header className=\"modal-card-head\">\r\n+                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n+                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+                        </header>\r\n+                        <section className=\"modal-card-body\">\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Título</label>\r\n+                                <div className=\"control\">\r\n+                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n+                                        value={currentTask.title}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Título de la tarea\" />\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Descripción</label>\r\n+                                <div className=\"control\">\r\n+                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n+                                        value={currentTask.description}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className='columns'>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Vencimiento</label>\r\n+                                        <div className=\"control\">\r\n+                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n+                                                value={currentTask.dueDate}\r\n+                                                onChange={handleInputChange}\r\n+                                                placeholder=\"Fecha de vencimiento\" />\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Importancia</label>\r\n+                                        <div className=\"control\">\r\n+                                            <div className=\"select is-fullwidth is-text\">\r\n+                                                <select name=\"priority\"\r\n+                                                    value={currentTask.priority}\r\n+                                                    onChange={handleInputChange}>\r\n+                                                    <option>Urgente</option>\r\n+                                                    <option>Alta</option>\r\n+                                                    <option>Media</option>\r\n+                                                    <option>Baja</option>\r\n+                                                </select>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </section>\r\n+                        <footer className=\"modal-card-foot\">\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n+                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+                        </footer>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1723590695742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,330 +156,4 @@\n             )}\r\n         </div>\r\n     );\r\n }\r\n-import React, { useState } from 'react';\r\n-import { useParams } from 'react-router-dom';\r\n-import axios from 'axios';\r\n-\r\n-export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-    const { spaceId } = useParams();\r\n-    const [tasks, setTasks] = useState([]);\r\n-\r\n-    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n-    const [isEditMode, setIsEditMode] = useState(false);\r\n-    const [currentTask, setCurrentTask] = useState({\r\n-        id: null,\r\n-        title: '',\r\n-        description: '',\r\n-        dueDate: '',\r\n-        priority: 'Media'\r\n-    });\r\n-\r\n-    const handleTaskModalToggle = () => {\r\n-        setTaskModalOpen(!isTaskModalOpen);\r\n-        if (!isTaskModalOpen) {\r\n-            setCurrentTask({\r\n-                id: null,\r\n-                title: '',\r\n-                description: '',\r\n-                dueDate: '',\r\n-                priority: 'Media',\r\n-                spaceId: spaceId\r\n-            });\r\n-            setIsEditMode(false);\r\n-        }\r\n-    };\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        const { name, value } = e.target;\r\n-        setCurrentTask({ ...currentTask, [name]: value });\r\n-    };\r\n-\r\n-    const handleSaveCreate = () => {\r\n-        if (isEditMode) {\r\n-            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n-                .then((response) => {\r\n-                    const updatedTask = response.data;\r\n-                    setTasks(prevTasks =>\r\n-                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n-                    );\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        } else {\r\n-            axios.post('http://localhost:3000/tasks', currentTask)\r\n-                .then((response) => {\r\n-                    const newTask = response.data;\r\n-                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    const handleEditTask = (task) => {\r\n-        setCurrentTask(task);\r\n-        setIsEditMode(true);\r\n-        setTaskModalOpen(true);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n-                    <span className='has-text-primary-20-invert'>+</span>\r\n-                </button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-                {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n-                        <label className=\"checkbox\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={task.isChecked || false}\r\n-                                disabled={!activeCheckboxes || task.isAssigned}\r\n-                                onChange={() => handleTaskChange(task)}\r\n-                            />\r\n-                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n-                                &nbsp;{task.title}\r\n-                            </span>\r\n-                        </label>\r\n-                    </div>\r\n-                ))}\r\n-            </div>\r\n-            {isTaskModalOpen && (\r\n-                <div className=\"modal is-active\">\r\n-                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n-                    <div className=\"modal-card\">\r\n-\r\n-                        <header className=\"modal-card-head\">\r\n-                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n-                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n-                        </header>\r\n-                        <section className=\"modal-card-body\">\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Título</label>\r\n-                                <div className=\"control\">\r\n-                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n-                                        value={currentTask.title}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Título de la tarea\" />\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Descripción</label>\r\n-                                <div className=\"control\">\r\n-                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n-                                        value={currentTask.description}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className='columns'>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Vencimiento</label>\r\n-                                        <div className=\"control\">\r\n-                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n-                                                value={currentTask.dueDate}\r\n-                                                onChange={handleInputChange}\r\n-                                                placeholder=\"Fecha de vencimiento\" />\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Importancia</label>\r\n-                                        <div className=\"control\">\r\n-                                            <div className=\"select is-fullwidth is-text\">\r\n-                                                <select name=\"priority\"\r\n-                                                    value={currentTask.priority}\r\n-                                                    onChange={handleInputChange}>\r\n-                                                    <option>Urgente</option>\r\n-                                                    <option>Alta</option>\r\n-                                                    <option>Media</option>\r\n-                                                    <option>Baja</option>\r\n-                                                </select>\r\n-                                            </div>\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                            </div>\r\n-                        </section>\r\n-                        <footer className=\"modal-card-foot\">\r\n-                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n-                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n-                        </footer>\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { useParams } from 'react-router-dom';\r\n-import axios from 'axios';\r\n-\r\n-export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-    const { spaceId } = useParams();\r\n-    const [tasks, setTasks] = useState([]);\r\n-    const handleTaskChange = (task) => {\r\n-        //     // Aquí podrías usar `setTasks` para actualizar el estado de las tareas\r\n-        setTasks(prevTasks => {\r\n-            return prevTasks.map(t => t.id === task.id ? task : t);\r\n-        });\r\n-    };\r\n-\r\n-    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n-    const [isEditMode, setIsEditMode] = useState(false);\r\n-    const [currentTask, setCurrentTask] = useState({\r\n-        id: null,\r\n-        title: '',\r\n-        description: '',\r\n-        dueDate: '',\r\n-        priority: 'Media'\r\n-    });\r\n-\r\n-    const handleTaskModalToggle = () => {\r\n-        setTaskModalOpen(!isTaskModalOpen);\r\n-        if (!isTaskModalOpen) {\r\n-            setCurrentTask({\r\n-                id: null,\r\n-                title: '',\r\n-                description: '',\r\n-                dueDate: '',\r\n-                priority: 'Media',\r\n-                spaceId: spaceId\r\n-            });\r\n-            setIsEditMode(false);\r\n-        }\r\n-    };\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        const { name, value } = e.target;\r\n-        setCurrentTask({ ...currentTask, [name]: value });\r\n-    };\r\n-\r\n-    const handleSaveCreate = () => {\r\n-        if (isEditMode) {\r\n-            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n-                .then((response) => {\r\n-                    const updatedTask = response.data;\r\n-                    setTasks(prevTasks =>\r\n-                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n-                    );\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        } else {\r\n-            axios.post('http://localhost:3000/tasks', currentTask)\r\n-                .then((response) => {\r\n-                    const newTask = response.data;\r\n-                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        }\r\n-    };\r\n-\r\n-\r\n-    const handleEditTask = (task) => {\r\n-        setCurrentTask(task);\r\n-        setIsEditMode(true);\r\n-        setTaskModalOpen(true);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n-                    <span className='has-text-primary-20-invert'>+</span>\r\n-                </button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-                {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n-                        <label className=\"checkbox\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={task.isChecked || false}\r\n-                                disabled={!activeCheckboxes || task.isAssigned}\r\n-                                onChange={() => handleTaskChange(task)}\r\n-                            />\r\n-                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n-                                &nbsp;{task.title}\r\n-                            </span>\r\n-                        </label>\r\n-                    </div>\r\n-                ))}\r\n-            </div>\r\n-            {isTaskModalOpen && (\r\n-                <div className=\"modal is-active\">\r\n-                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n-                    <div className=\"modal-card\">\r\n-\r\n-                        <header className=\"modal-card-head\">\r\n-                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n-                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n-                        </header>\r\n-                        <section className=\"modal-card-body\">\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Título</label>\r\n-                                <div className=\"control\">\r\n-                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n-                                        value={currentTask.title}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Título de la tarea\" />\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Descripción</label>\r\n-                                <div className=\"control\">\r\n-                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n-                                        value={currentTask.description}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className='columns'>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Vencimiento</label>\r\n-                                        <div className=\"control\">\r\n-                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n-                                                value={currentTask.dueDate}\r\n-                                                onChange={handleInputChange}\r\n-                                                placeholder=\"Fecha de vencimiento\" />\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Importancia</label>\r\n-                                        <div className=\"control\">\r\n-                                            <div className=\"select is-fullwidth is-text\">\r\n-                                                <select name=\"priority\"\r\n-                                                    value={currentTask.priority}\r\n-                                                    onChange={handleInputChange}>\r\n-                                                    <option>Urgente</option>\r\n-                                                    <option>Alta</option>\r\n-                                                    <option>Media</option>\r\n-                                                    <option>Baja</option>\r\n-                                                </select>\r\n-                                            </div>\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                            </div>\r\n-                        </section>\r\n-                        <footer className=\"modal-card-foot\">\r\n-                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n-                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n-                        </footer>\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n-        </div>\r\n-    );\r\n-}\r\n"
                },
                {
                    "date": 1723590963521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,13 +48,14 @@\n         } else {\r\n             axios.post('http://localhost:3000/tasks', currentTask)\r\n                 .then((response) => {\r\n                     const newTask = response.data;\r\n-                    setTasks(prevTasks => [...prevTasks, newTask]);\r\n+                    setTasks(prevTasks => [...prevTasks, newTask]); // Aquí se asegura de añadir el nuevo task con ID\r\n                     handleTaskModalToggle();\r\n                 });\r\n         }\r\n     };\r\n+    \r\n \r\n \r\n     const handleEditTask = (task) => {\r\n         setCurrentTask(task);\r\n"
                },
                {
                    "date": 1723590981321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+import React, { useState } from 'react';\r\n+import { useParams } from 'react-router-dom';\r\n+import axios from 'axios';\r\n+\r\n+export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n+    const { spaceId } = useParams();\r\n+\r\n+    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n+    const [isEditMode, setIsEditMode] = useState(false);\r\n+    const [currentTask, setCurrentTask] = useState({\r\n+        id: null,\r\n+        title: '',\r\n+        description: '',\r\n+        dueDate: '',\r\n+        priority: 'Media'\r\n+    });\r\n+\r\n+    const handleTaskModalToggle = () => {\r\n+        setTaskModalOpen(!isTaskModalOpen);\r\n+        if (!isTaskModalOpen) {\r\n+            setCurrentTask({\r\n+                id: null,\r\n+                title: '',\r\n+                description: '',\r\n+                dueDate: '',\r\n+                priority: 'Media',\r\n+                spaceId: spaceId\r\n+            });\r\n+            setIsEditMode(false);\r\n+        }\r\n+    };\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        const { name, value } = e.target;\r\n+        setCurrentTask({ ...currentTask, [name]: value });\r\n+    };\r\n+\r\n+    const handleSaveCreate = () => {\r\n+        if (isEditMode) {\r\n+            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n+                .then((response) => {\r\n+                    const updatedTask = response.data;\r\n+                    setTasks(prevTasks =>\r\n+                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n+                    );\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        } else {\r\n+            axios.post('http://localhost:3000/tasks', currentTask)\r\n+                .then((response) => {\r\n+                    const newTask = response.data;\r\n+                    setTasks(prevTasks => [...prevTasks, newTask]); // Aquí se asegura de añadir el nuevo task con ID\r\n+                    handleTaskModalToggle();\r\n+                });\r\n+        }\r\n+    };\r\n+    \r\n+\r\n+\r\n+    const handleEditTask = (task) => {\r\n+        setCurrentTask(task);\r\n+        setIsEditMode(true);\r\n+        setTaskModalOpen(true);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n+                    <span className='has-text-primary-20-invert'>+</span>\r\n+                </button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+                {tasks.map((task) => (\r\n+                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n+                        <label className=\"checkbox\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={task.isChecked || false}\r\n+                                disabled={!activeCheckboxes || task.isAssigned}\r\n+                                onChange={() => handleTaskChange(task)}\r\n+                            />\r\n+                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n+                                &nbsp;{task.title}\r\n+                            </span>\r\n+                        </label>\r\n+                    </div>\r\n+                ))}\r\n+            </div>\r\n+            {isTaskModalOpen && (\r\n+                <div className=\"modal is-active\">\r\n+                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n+                    <div className=\"modal-card\">\r\n+\r\n+                        <header className=\"modal-card-head\">\r\n+                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n+                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n+                        </header>\r\n+                        <section className=\"modal-card-body\">\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Título</label>\r\n+                                <div className=\"control\">\r\n+                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n+                                        value={currentTask.title}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Título de la tarea\" />\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className=\"field\">\r\n+                                <label className=\"label\">Descripción</label>\r\n+                                <div className=\"control\">\r\n+                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n+                                        value={currentTask.description}\r\n+                                        onChange={handleInputChange}\r\n+                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n+                                </div>\r\n+                            </div>\r\n+                            <div className='columns'>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Vencimiento</label>\r\n+                                        <div className=\"control\">\r\n+                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n+                                                value={currentTask.dueDate}\r\n+                                                onChange={handleInputChange}\r\n+                                                placeholder=\"Fecha de vencimiento\" />\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                                <div className='column is-half'>\r\n+                                    <div className=\"field\">\r\n+                                        <label className=\"label\">Importancia</label>\r\n+                                        <div className=\"control\">\r\n+                                            <div className=\"select is-fullwidth is-text\">\r\n+                                                <select name=\"priority\"\r\n+                                                    value={currentTask.priority}\r\n+                                                    onChange={handleInputChange}>\r\n+                                                    <option>Urgente</option>\r\n+                                                    <option>Alta</option>\r\n+                                                    <option>Media</option>\r\n+                                                    <option>Baja</option>\r\n+                                                </select>\r\n+                                            </div>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </div>\r\n+                            </div>\r\n+                        </section>\r\n+                        <footer className=\"modal-card-foot\">\r\n+                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n+                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n+                        </footer>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+        </div>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1723591206426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,9 @@\n                     handleTaskModalToggle();\r\n                 });\r\n         }\r\n     };\r\n-    \r\n \r\n-\r\n     const handleEditTask = (task) => {\r\n         setCurrentTask(task);\r\n         setIsEditMode(true);\r\n         setTaskModalOpen(true);\r\n@@ -92,9 +90,8 @@\n             {isTaskModalOpen && (\r\n                 <div className=\"modal is-active\">\r\n                     <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n                     <div className=\"modal-card\">\r\n-\r\n                         <header className=\"modal-card-head\">\r\n                             <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n                             <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n                         </header>\r\n@@ -154,167 +151,8 @@\n                         </footer>\r\n                     </div>\r\n                 </div>\r\n             )}\r\n-        </div>\r\n-    );\r\n-}\r\n-import React, { useState } from 'react';\r\n-import { useParams } from 'react-router-dom';\r\n-import axios from 'axios';\r\n \r\n-export const Task = ({ activeCheckboxes, handleTaskChange, tasks }) => {\r\n-    const { spaceId } = useParams();\r\n-\r\n-    const [isTaskModalOpen, setTaskModalOpen] = useState(false);\r\n-    const [isEditMode, setIsEditMode] = useState(false);\r\n-    const [currentTask, setCurrentTask] = useState({\r\n-        id: null,\r\n-        title: '',\r\n-        description: '',\r\n-        dueDate: '',\r\n-        priority: 'Media'\r\n-    });\r\n-\r\n-    const handleTaskModalToggle = () => {\r\n-        setTaskModalOpen(!isTaskModalOpen);\r\n-        if (!isTaskModalOpen) {\r\n-            setCurrentTask({\r\n-                id: null,\r\n-                title: '',\r\n-                description: '',\r\n-                dueDate: '',\r\n-                priority: 'Media',\r\n-                spaceId: spaceId\r\n-            });\r\n-            setIsEditMode(false);\r\n-        }\r\n-    };\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        const { name, value } = e.target;\r\n-        setCurrentTask({ ...currentTask, [name]: value });\r\n-    };\r\n-\r\n-    const handleSaveCreate = () => {\r\n-        if (isEditMode) {\r\n-            axios.put(`http://localhost:3000/tasks/${currentTask.id}`, currentTask)\r\n-                .then((response) => {\r\n-                    const updatedTask = response.data;\r\n-                    setTasks(prevTasks =>\r\n-                        prevTasks.map(task => task.id === updatedTask.id ? updatedTask : task)\r\n-                    );\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        } else {\r\n-            axios.post('http://localhost:3000/tasks', currentTask)\r\n-                .then((response) => {\r\n-                    const newTask = response.data;\r\n-                    setTasks(prevTasks => [...prevTasks, newTask]); // Aquí se asegura de añadir el nuevo task con ID\r\n-                    handleTaskModalToggle();\r\n-                });\r\n-        }\r\n-    };\r\n-    \r\n-\r\n-\r\n-    const handleEditTask = (task) => {\r\n-        setCurrentTask(task);\r\n-        setIsEditMode(true);\r\n-        setTaskModalOpen(true);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-                <button className=\"button is-primary is-rounded is-small\" onClick={handleTaskModalToggle} id=\"plus\">\r\n-                    <span className='has-text-primary-20-invert'>+</span>\r\n-                </button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-                {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n-                        <label className=\"checkbox\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={task.isChecked || false}\r\n-                                disabled={!activeCheckboxes || task.isAssigned}\r\n-                                onChange={() => handleTaskChange(task)}\r\n-                            />\r\n-                            <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                                style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }}>\r\n-                                &nbsp;{task.title}\r\n-                            </span>\r\n-                        </label>\r\n-                    </div>\r\n-                ))}\r\n-            </div>\r\n-            {isTaskModalOpen && (\r\n-                <div className=\"modal is-active\">\r\n-                    <div className=\"modal-background\" onClick={handleTaskModalToggle}></div>\r\n-                    <div className=\"modal-card\">\r\n-\r\n-                        <header className=\"modal-card-head\">\r\n-                            <p className=\"modal-card-title\">{isEditMode ? 'Editar tarea' : 'Nueva tarea'}</p>\r\n-                            <button className=\"delete\" aria-label=\"close\" onClick={handleTaskModalToggle}></button>\r\n-                        </header>\r\n-                        <section className=\"modal-card-body\">\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Título</label>\r\n-                                <div className=\"control\">\r\n-                                    <input className=\"input is-text\" type=\"text\" name=\"title\"\r\n-                                        value={currentTask.title}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Título de la tarea\" />\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className=\"field\">\r\n-                                <label className=\"label\">Descripción</label>\r\n-                                <div className=\"control\">\r\n-                                    <textarea className=\"textarea is-text\" name=\"description\"\r\n-                                        value={currentTask.description}\r\n-                                        onChange={handleInputChange}\r\n-                                        placeholder=\"Descripción de la tarea\" rows={2}></textarea>\r\n-                                </div>\r\n-                            </div>\r\n-                            <div className='columns'>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Vencimiento</label>\r\n-                                        <div className=\"control\">\r\n-                                            <input className=\"input is-text\" type=\"date\" name=\"dueDate\"\r\n-                                                value={currentTask.dueDate}\r\n-                                                onChange={handleInputChange}\r\n-                                                placeholder=\"Fecha de vencimiento\" />\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                                <div className='column is-half'>\r\n-                                    <div className=\"field\">\r\n-                                        <label className=\"label\">Importancia</label>\r\n-                                        <div className=\"control\">\r\n-                                            <div className=\"select is-fullwidth is-text\">\r\n-                                                <select name=\"priority\"\r\n-                                                    value={currentTask.priority}\r\n-                                                    onChange={handleInputChange}>\r\n-                                                    <option>Urgente</option>\r\n-                                                    <option>Alta</option>\r\n-                                                    <option>Media</option>\r\n-                                                    <option>Baja</option>\r\n-                                                </select>\r\n-                                            </div>\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </div>\r\n-                            </div>\r\n-                        </section>\r\n-                        <footer className=\"modal-card-foot\">\r\n-                            <button className=\"button is-success\" onClick={handleSaveCreate}>{isEditMode ? 'Guardar cambios' : 'Crear tarea'}</button>&nbsp;\r\n-                            <button className=\"button\" onClick={handleTaskModalToggle}>Cancelar</button>\r\n-                        </footer>\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n         </div>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1723592377890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n                 </button>\r\n             </div>\r\n             <div className=\"box task-container\">\r\n                 {tasks.map((task) => (\r\n-                    <div key={task.id} className='task-box' onClick={() => handleEditTask(task)}>\r\n+                    <div key={task.id} className='task-box' >\r\n                         <label className=\"checkbox\">\r\n                             <input\r\n                                 type=\"checkbox\"\r\n                                 checked={task.isChecked || false}\r\n"
                }
            ],
            "date": 1723503211082,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const TaskBoard = () => {\r\n   const [tasks, setTasks] = useState([]);\r\n   const [assignedTasks, setAssignedTasks] = useState({});\r\n   const [isCheckboxActive, setIsCheckboxActive] = useState({});\r\n\r\n   useEffect(() => {\r\n      axios.get('../../db.json')\r\n         .then(response => {\r\n            setTasks(response.data.tasks);\r\n            setIsCheckboxActive(response.data.tasks.reduce((acc, task) => {\r\n               acc[task.id] = false; // Todos los checkboxes comienzan desactivados\r\n               return acc;\r\n            }, {}));\r\n         })\r\n         .catch(error => {\r\n            console.error('Error fetching tasks:', error);\r\n         });\r\n   }, []);\r\n\r\n   const categoryNames = [\"Por hacer\", \"En proceso\", \"Hecho\"];\r\n\r\n   const handlePlusClick = (categoryIndex) => {\r\n      // Activa todos los checkboxes\r\n      setIsCheckboxActive((prev) => {\r\n         const newState = { ...prev };\r\n         tasks.forEach(task => {\r\n            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n               newState[task.id] = true;\r\n            }\r\n         });\r\n         return newState;\r\n      });\r\n   };\r\n\r\n   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n      // Asigna la tarea a la categoría y desactiva el checkbox\r\n      const selectedTask = tasks.find(task => task.id === taskId);\r\n\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         if (!newAssignedTasks[categoryIndex]) {\r\n            newAssignedTasks[categoryIndex] = [];\r\n         }\r\n         newAssignedTasks[categoryIndex].push(selectedTask);\r\n         return newAssignedTasks;\r\n      });\r\n\r\n      setIsCheckboxActive((prev) => ({\r\n         ...prev,\r\n         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n      }));\r\n   };\r\n\r\n   const handleTaskClick = (taskId, categoryIndex) => {\r\n      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n         return newAssignedTasks;\r\n      });\r\n\r\n      setIsCheckboxActive((prev) => ({\r\n         ...prev,\r\n         [taskId]: true, // Activa el checkbox nuevamente\r\n      }));\r\n   };\r\n\r\n   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n      event.preventDefault();\r\n      // Mueve la tarea a la siguiente categoría\r\n      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         // Elimina la tarea de la categoría actual\r\n         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n\r\n         // Añade la tarea a la siguiente categoría\r\n         if (!newAssignedTasks[nextCategoryIndex]) {\r\n            newAssignedTasks[nextCategoryIndex] = [];\r\n         }\r\n         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n         return newAssignedTasks;\r\n      });\r\n   };\r\n\r\n   return (\r\n      <div className=\"columns p-4\">\r\n         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n            <div className=\"box\">\r\n               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n            </div>\r\n            <div className=\"box task-container\">\r\n               {tasks.map(task => (\r\n                  <div key={task.id} className='task-box'>\r\n                     <label className='checkbox'>\r\n                        <input\r\n                           type='checkbox'\r\n                           checked={!isCheckboxActive[task.id]}\r\n                           onChange={() => handleTaskCheckboxChange(task.id)}\r\n                           disabled={!isCheckboxActive[task.id]}\r\n                        />\r\n                        <span className='subtitle is-6'>{task.title}</span>\r\n                     </label>\r\n                  </div>\r\n               ))}\r\n            </div>\r\n         </div>\r\n\r\n         <div className=\"column\" id=\"panel-board\">\r\n            <div className=\"box\">\r\n               <h2 className=\"title\">Tablero Kanban</h2>\r\n            </div>\r\n            <div className=\"table-container\">\r\n               <table className=\"table is-fullwidth\">\r\n                  <thead>\r\n                     <tr>\r\n                        {categoryNames.map((name, index) => (\r\n                           <th key={index} style={{\r\n                              textAlign: 'center',\r\n                              backgroundColor: 'white',\r\n                              borderRadius: '15px',\r\n                              boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'\r\n                           }}>{name}</th>\r\n                        ))}\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <tr>\r\n                        {categoryNames.map((_, categoryIndex) => (\r\n                           <td key={categoryIndex} style={{ height: '80vh', textAlign: 'center' }}>\r\n                              <div className='pb-4'>\r\n                                 <button\r\n                                    className=\"button is-primary is-rounded is-small\"\r\n                                    id=\"plus\"\r\n                                    style={{ opacity: 0.7 }}\r\n                                    onClick={() => handlePlusClick(categoryIndex)}\r\n                                 >\r\n                                    <span className='has-text-primary-20-invert'>+</span>\r\n                                 </button>\r\n                              </div>\r\n\r\n                              {assignedTasks[categoryIndex] && assignedTasks[categoryIndex].map((task, taskIndex) => (\r\n                                 <div\r\n                                    key={taskIndex}\r\n                                    className='task-box-2'\r\n                                    onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n                                    onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n                                 >\r\n                                    <span className='subtitle is-6'>{task.title}</span>\r\n                                 </div>\r\n                              ))}\r\n                           </td>\r\n                        ))}\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n"
        }
    ]
}
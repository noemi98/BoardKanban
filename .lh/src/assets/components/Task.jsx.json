{
    "sourceFile": "src/assets/components/Task.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1723503211082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1723503211082,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const TaskBoard = () => {\r\n   const [tasks, setTasks] = useState([]);\r\n   const [assignedTasks, setAssignedTasks] = useState({});\r\n   const [isCheckboxActive, setIsCheckboxActive] = useState({});\r\n\r\n   useEffect(() => {\r\n      axios.get('../../db.json')\r\n         .then(response => {\r\n            setTasks(response.data.tasks);\r\n            setIsCheckboxActive(response.data.tasks.reduce((acc, task) => {\r\n               acc[task.id] = false; // Todos los checkboxes comienzan desactivados\r\n               return acc;\r\n            }, {}));\r\n         })\r\n         .catch(error => {\r\n            console.error('Error fetching tasks:', error);\r\n         });\r\n   }, []);\r\n\r\n   const categoryNames = [\"Por hacer\", \"En proceso\", \"Hecho\"];\r\n\r\n   const handlePlusClick = (categoryIndex) => {\r\n      // Activa todos los checkboxes\r\n      setIsCheckboxActive((prev) => {\r\n         const newState = { ...prev };\r\n         tasks.forEach(task => {\r\n            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n               newState[task.id] = true;\r\n            }\r\n         });\r\n         return newState;\r\n      });\r\n   };\r\n\r\n   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n      // Asigna la tarea a la categoría y desactiva el checkbox\r\n      const selectedTask = tasks.find(task => task.id === taskId);\r\n\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         if (!newAssignedTasks[categoryIndex]) {\r\n            newAssignedTasks[categoryIndex] = [];\r\n         }\r\n         newAssignedTasks[categoryIndex].push(selectedTask);\r\n         return newAssignedTasks;\r\n      });\r\n\r\n      setIsCheckboxActive((prev) => ({\r\n         ...prev,\r\n         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n      }));\r\n   };\r\n\r\n   const handleTaskClick = (taskId, categoryIndex) => {\r\n      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n         return newAssignedTasks;\r\n      });\r\n\r\n      setIsCheckboxActive((prev) => ({\r\n         ...prev,\r\n         [taskId]: true, // Activa el checkbox nuevamente\r\n      }));\r\n   };\r\n\r\n   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n      event.preventDefault();\r\n      // Mueve la tarea a la siguiente categoría\r\n      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n\r\n      setAssignedTasks((prev) => {\r\n         const newAssignedTasks = { ...prev };\r\n         // Elimina la tarea de la categoría actual\r\n         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n\r\n         // Añade la tarea a la siguiente categoría\r\n         if (!newAssignedTasks[nextCategoryIndex]) {\r\n            newAssignedTasks[nextCategoryIndex] = [];\r\n         }\r\n         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n         return newAssignedTasks;\r\n      });\r\n   };\r\n\r\n   return (\r\n      <div className=\"columns p-4\">\r\n         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n            <div className=\"box\">\r\n               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n            </div>\r\n            <div className=\"box task-container\">\r\n               {tasks.map(task => (\r\n                  <div key={task.id} className='task-box'>\r\n                     <label className='checkbox'>\r\n                        <input\r\n                           type='checkbox'\r\n                           checked={!isCheckboxActive[task.id]}\r\n                           onChange={() => handleTaskCheckboxChange(task.id)}\r\n                           disabled={!isCheckboxActive[task.id]}\r\n                        />\r\n                        <span className='subtitle is-6'>{task.title}</span>\r\n                     </label>\r\n                  </div>\r\n               ))}\r\n            </div>\r\n         </div>\r\n\r\n         <div className=\"column\" id=\"panel-board\">\r\n            <div className=\"box\">\r\n               <h2 className=\"title\">Tablero Kanban</h2>\r\n            </div>\r\n            <div className=\"table-container\">\r\n               <table className=\"table is-fullwidth\">\r\n                  <thead>\r\n                     <tr>\r\n                        {categoryNames.map((name, index) => (\r\n                           <th key={index} style={{\r\n                              textAlign: 'center',\r\n                              backgroundColor: 'white',\r\n                              borderRadius: '15px',\r\n                              boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'\r\n                           }}>{name}</th>\r\n                        ))}\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <tr>\r\n                        {categoryNames.map((_, categoryIndex) => (\r\n                           <td key={categoryIndex} style={{ height: '80vh', textAlign: 'center' }}>\r\n                              <div className='pb-4'>\r\n                                 <button\r\n                                    className=\"button is-primary is-rounded is-small\"\r\n                                    id=\"plus\"\r\n                                    style={{ opacity: 0.7 }}\r\n                                    onClick={() => handlePlusClick(categoryIndex)}\r\n                                 >\r\n                                    <span className='has-text-primary-20-invert'>+</span>\r\n                                 </button>\r\n                              </div>\r\n\r\n                              {assignedTasks[categoryIndex] && assignedTasks[categoryIndex].map((task, taskIndex) => (\r\n                                 <div\r\n                                    key={taskIndex}\r\n                                    className='task-box-2'\r\n                                    onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n                                    onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n                                 >\r\n                                    <span className='subtitle is-6'>{task.title}</span>\r\n                                 </div>\r\n                              ))}\r\n                           </td>\r\n                        ))}\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n"
        }
    ]
}
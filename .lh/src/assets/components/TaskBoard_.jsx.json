{
    "sourceFile": "src/assets/components/TaskBoard_.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1723586670735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723586679670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n \r\n-\r\n export const TaskBoard = () => {\r\n    //FILTRO DE TAREAS POR SPACE\r\n    const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n    const [tasks, setTasks] = useState([]);\r\n"
                }
            ],
            "date": 1723586670735,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nexport const TaskBoard = () => {\r\n   //FILTRO DE TAREAS POR SPACE\r\n   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n   const [tasks, setTasks] = useState([]);\r\n\r\n   const fetchTasks = async () => {\r\n      try {\r\n         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n         setTasks(response.data);\r\n         //console.log(response.data);\r\n      } catch (error) {\r\n         console.error(\"Error obteniendo las tareas:\", error);\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      fetchTasks(); // Cargar tareas al montar el componente\r\n   }, [spaceId]);\r\n\r\n\r\n   const [isModalOpen, setModalOpen] = useState(false);\r\n   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n\r\n   const toggleModalOpen = () => {\r\n      setModalOpen(!isModalOpen);\r\n   }\r\n   const toggleModalCatOpen = () => {\r\n      setModalCatOpen(!isModalCatOpen);\r\n   }\r\n\r\n   // Para las categorías del tablero\r\n   const [categoryCount, setCategoryCount] = useState(3);\r\n   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n\r\n   const handleCategoryCountChange = (event) => {\r\n      const count = parseInt(event.target.value, 10);\r\n\r\n      setCategoryCount(count);\r\n\r\n      if (count > categoryNames.length) {\r\n         const newCategories = [...categoryNames];\r\n         while (newCategories.length < count) {\r\n            newCategories.push(\"\");\r\n         }\r\n         setCategoryNames(newCategories);\r\n      } else if (count < categoryNames.length) {\r\n         setCategoryNames(categoryNames.slice(0, count));\r\n      }\r\n   };\r\n\r\n   const handleCategoryNameChange = (index, event) => {\r\n      const newCategories = [...categoryNames];\r\n      newCategories[index] = event.target.value;\r\n      setCategoryNames(newCategories);\r\n   };\r\n\r\n   // Para dibujar la tabla según las categorías\r\n   const handleCreateBoard = () => {\r\n      // Cerrar el modal\r\n      toggleModalCatOpen();\r\n   };\r\n\r\n   // Para activar el check de las tareas\r\n   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n   const [assignedTasks, setAssignedTasks] = useState({});\r\n   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n\r\n   const handlePlusClick = (index) => {\r\n      setActiveCheckboxes(true);\r\n      setSelectedCategoryIndex(index);\r\n   };\r\n\r\n   const isTaskDisabled = (task) => {\r\n      // Verifica si la tarea está en cualquier categoría\r\n      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n   };\r\n\r\n   const handleTaskSelect = (task) => {\r\n      const newAssignedTasks = { ...assignedTasks };\r\n      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n         newAssignedTasks[selectedCategoryIndex] = [];\r\n      }\r\n      newAssignedTasks[selectedCategoryIndex].push(task);\r\n\r\n      setAssignedTasks(newAssignedTasks);\r\n      setTasks(prevTasks =>\r\n         prevTasks.map(t =>\r\n            t.id === task.id ? { ...t, isChecked: true } : t\r\n         )\r\n      );\r\n\r\n      setActiveCheckboxes(false);\r\n      setSelectedCategoryIndex(null);\r\n   };\r\n\r\n   const isTaskAssigned = (task) => {\r\n      /*return Object.values(assignedTasks).some(\r\n         tasksInCategory => tasksInCategory.includes(task)\r\n      );*/\r\n      return Object.values(assignedTasks).flat().includes(task);\r\n   };\r\n\r\n   // Remover tarea de la categoría\r\n   const handleTaskRemove = (task, categoryIndex) => {\r\n      const newAssignedTasks = { ...assignedTasks };\r\n      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n      setAssignedTasks(newAssignedTasks);\r\n      // Asegúrate de que el estado del checkbox refleje los cambios\r\n      setTasks(prevTasks =>\r\n         prevTasks.map(t =>\r\n            t.id === task.id ? { ...t, isChecked: false } : t\r\n         )\r\n      );\r\n   };\r\n\r\n   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n   const handleTaskChange = (task) => {\r\n      if (task.isChecked) {\r\n         handleTaskRemove(task, selectedCategoryIndex);\r\n      } else {\r\n         handleTaskSelect(task);\r\n      }\r\n   };\r\n\r\n   // Mover tarea a la siguiente categoría\r\n   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n      const newAssignedTasks = { ...assignedTasks };\r\n      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n\r\n      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n      if (!newAssignedTasks[nextCategoryIndex]) {\r\n         newAssignedTasks[nextCategoryIndex] = [];\r\n      }\r\n      newAssignedTasks[nextCategoryIndex].push(task);\r\n      setAssignedTasks(newAssignedTasks);\r\n   };\r\n\r\n   return (\r\n      <div className=\"columns p-4\">\r\n         <Task\r\n            toggleModalOpen={() => {}}\r\n            activeCheckboxes={activeCheckboxes}\r\n            handleTaskChange={handleTaskChange}\r\n            tasks={tasks}\r\n         />\r\n         <div className=\"column\" id=\"panel-board\">\r\n            <div className=\"box header\">\r\n               <h2 className=\"title\">Tablero Kanban</h2>\r\n               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n            </div>\r\n            <div className='box tableroKanban'>\r\n               <div className=\"table-container is-fullwidth\">\r\n                  <table className=\"table is-fullwidth table-kanban\">\r\n                     <thead>\r\n                        <tr>\r\n                           {categoryNames.map((name, index) => (\r\n                              <th key={index} style={{\r\n                                 textAlign: 'center',\r\n                                 backgroundColor: '#EBECF0',\r\n                                 height: '30px',\r\n                                 verticalAlign: 'middle'\r\n                              }}>\r\n                                 {name || `Categoría ${index + 1}`}\r\n                              </th>\r\n                           ))}\r\n                        </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                        <tr>\r\n                           {categoryNames.map((_, index) => (\r\n                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n                                 <div className='pb-4'>\r\n                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n                                       <span className='has-text-primary-20-invert'>+</span>\r\n                                    </button>\r\n                                 </div>\r\n                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                    <div\r\n                                       key={taskIndex}\r\n                                       className='task-box-2'\r\n                                       onClick={() => handleTaskRemove(task, index)}\r\n                                       onContextMenu={(e) => {\r\n                                          e.preventDefault();\r\n                                          handleTaskMoveToNext(task, index);\r\n                                       }}\r\n                                    >\r\n                                       <span className='subtitle is-6'>{task.title}</span>\r\n                                    </div>\r\n                                 ))}\r\n                              </td>\r\n                           ))}\r\n                        </tr>\r\n                     </tbody>\r\n                  </table>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         {isModalCatOpen && (\r\n            <div className=\"modal is-active\">\r\n               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n               <div className=\"modal-card\">\r\n                  <header className=\"modal-card-head\">\r\n                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n                  </header>\r\n                  <section className=\"modal-card-body\">\r\n                     <div className=\"field\">\r\n                        <label className=\"label\">Cantidad de Categorías</label>\r\n                        <div className=\"control\">\r\n                           <input\r\n                              className=\"input\"\r\n                              type=\"number\"\r\n                              value={categoryCount}\r\n                              onChange={handleCategoryCountChange}\r\n                              min=\"3\"\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                     {categoryNames.map((name, index) => (\r\n                        <div key={index} className=\"field\">\r\n                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n                           <div className=\"control\">\r\n                              <input\r\n                                 className=\"input\"\r\n                                 type=\"text\"\r\n                                 value={name}\r\n                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n                                 placeholder={`Categoría ${index + 1}`}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     ))}\r\n                  </section>\r\n                  <footer className=\"modal-card-foot\">\r\n                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n                  </footer>\r\n               </div>\r\n            </div>\r\n         )}\r\n      </div>\r\n   );\r\n}\r\n"
        }
    ]
}
{
    "sourceFile": "src/assets/components/TaskBoard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 109,
            "patches": [
                {
                    "date": 1723478873586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723479617798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh' }}></td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723479635378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n                      </thead>\r\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh' }}></td>\r\n+                              <td key={index} style={{ height: '80vh' }}>Hola</td>\r\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n                   </table>\r\n@@ -201,209 +201,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh' }}></td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                                 <h3>Hola</h3>\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723479643706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,11 @@\n                      </thead>\r\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh' }}>Hola</td>\r\n+                              <td key={index} style={{ height: '80vh' }}>\r\n+                                 <button>+</button>\r\n+                              </td>\r\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n                   </table>\r\n"
                },
                {
                    "date": 1723479660584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh' }}>\r\n-                                 <button>+</button>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n                               </td>\r\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n"
                },
                {
                    "date": 1723479792548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,11 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+                                 <button className=\"button is-primary is-light is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n                               </td>\r\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n"
                },
                {
                    "date": 1723479800470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh' }}>\r\n-                                 <button className=\"button is-primary is-light is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n                                     <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                               </td>\r\n                            ))}\r\n"
                },
                {
                    "date": 1723479824474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723479836481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             <div className='box'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n-                        <tr>\r\n+                        <tr style={{textAlign: 'center'}}>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n@@ -205,212 +205,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723479852328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr style={{ height: '80vh', textAlign: 'center' }}>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723479862210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             <div className='box'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n-                        <tr style={{ height: '80vh', textAlign: 'center' }}>\r\n+                        <tr style={{ textAlign: 'center' }}>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n@@ -205,212 +205,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr style={{textAlign: 'center'}}>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723479883095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723480998025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723483290498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,208 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cierra el modal después de crear el tablero\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723483687932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,11 @@\n       // Cierra el modal después de crear el tablero\r\n       toggleModalCatOpen();\r\n    };\r\n \r\n+   //Para activar el check de las tareas\r\n+   const [selectedTask, setSelectedTask] = useState([]);\r\n \r\n-\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -205,628 +206,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr style={{ textAlign: 'center' }}>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723483713433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [selectedTask, setSelectedTask] = useState([]);\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723483790257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,217 +58,19 @@\n \r\n    //Para activar el check de las tareas\r\n    const [selectedTask, setSelectedTask] = useState([]);\r\n \r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n+   const handleTaskSelect = (taskId) => {\r\n+      if (!selectedTasks.includes(taskId)) {\r\n+         setSelectedTasks([...selectedTasks, taskId]);\r\n       }\r\n    };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n+   \r\n+   const handleTaskDeselect = (taskId) => {\r\n+      setSelectedTasks(selectedTasks.filter(id => id !== taskId));\r\n    };\r\n+   \r\n \r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cierra el modal después de crear el tablero\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [selectedTask, setSelectedTask] = useState([]);\r\n-\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n"
                },
                {
                    "date": 1723483834461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,14 @@\n       if (!selectedTasks.includes(taskId)) {\r\n          setSelectedTasks([...selectedTasks, taskId]);\r\n       }\r\n    };\r\n-   \r\n+\r\n    const handleTaskDeselect = (taskId) => {\r\n       setSelectedTasks(selectedTasks.filter(id => id !== taskId));\r\n    };\r\n-   \r\n \r\n+\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -79,9 +79,18 @@\n             </div>\r\n             <div className=\"box task-container\">\r\n                {tasks.map(task => (\r\n                   <div key={task.id} className='task-box'>\r\n-                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n+                     <label className=\"checkbox\">\r\n+                        <input\r\n+                           type=\"checkbox\"\r\n+                           onChange={() => handleTaskSelect(task.id)}\r\n+                           disabled={selectedTasks.includes(task.id)}\r\n+                        />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n                   </div>\r\n                ))}\r\n             </div>\r\n          </div>\r\n"
                },
                {
                    "date": 1723483848990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,229 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [selectedTask, setSelectedTask] = useState([]);\r\n+\r\n+   const handleTaskSelect = (taskId) => {\r\n+      if (!selectedTasks.includes(taskId)) {\r\n+         setSelectedTasks([...selectedTasks, taskId]);\r\n+      }\r\n+   };\r\n+\r\n+   const handleTaskDeselect = (taskId) => {\r\n+      setSelectedTasks(selectedTasks.filter(id => id !== taskId));\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input\r\n+                           type=\"checkbox\"\r\n+                           onChange={() => handleTaskSelect(task.id)}\r\n+                           disabled={selectedTask.includes(task.id)}\r\n+                        />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723483911384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,247 +59,24 @@\n    //Para activar el check de las tareas\r\n    const [selectedTask, setSelectedTask] = useState([]);\r\n \r\n    const handleTaskSelect = (taskId) => {\r\n-      if (!selectedTasks.includes(taskId)) {\r\n-         setSelectedTasks([...selectedTasks, taskId]);\r\n+      if (!selectedTask.includes(taskId)) {\r\n+         setselectedTask([...selectedTask, taskId]);\r\n       }\r\n    };\r\n \r\n    const handleTaskDeselect = (taskId) => {\r\n-      setSelectedTasks(selectedTasks.filter(id => id !== taskId));\r\n+      setselectedTask(selectedTask.filter(id => id !== taskId));\r\n    };\r\n \r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input\r\n-                           type=\"checkbox\"\r\n-                           onChange={() => handleTaskSelect(task.id)}\r\n-                           disabled={selectedTask.includes(task.id)}\r\n-                        />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n+   const handleTaskAssignment = (taskId, categoryIndex) => {\r\n+      // Asigna la tarea a la categoría específica\r\n+      // Actualiza el estado para reflejar la tarea asignada en el lugar correcto\r\n+      handleTaskSelect(taskId);\r\n    };\r\n \r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n \r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [selectedTask, setSelectedTask] = useState([]);\r\n-\r\n-   const handleTaskSelect = (taskId) => {\r\n-      if (!selectedTasks.includes(taskId)) {\r\n-         setSelectedTasks([...selectedTasks, taskId]);\r\n-      }\r\n-   };\r\n-\r\n-   const handleTaskDeselect = (taskId) => {\r\n-      setSelectedTasks(selectedTasks.filter(id => id !== taskId));\r\n-   };\r\n-\r\n-\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -312,9 +89,9 @@\n                      <label className=\"checkbox\">\r\n                         <input\r\n                            type=\"checkbox\"\r\n                            onChange={() => handleTaskSelect(task.id)}\r\n-                           disabled={selectedTasks.includes(task.id)}\r\n+                           disabled={selectedTask.includes(task.id)}\r\n                         />\r\n                         <span className='subtitle is-6'>{task.title}</span>\r\n                      </label>\r\n \r\n"
                },
                {
                    "date": 1723483943762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,235 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [selectedTask, setSelectedTask] = useState([]);\r\n+\r\n+   const handleTaskSelect = (taskId) => {\r\n+      if (!selectedTask.includes(taskId)) {\r\n+         setSelectedTask([...selectedTask, taskId]);\r\n+      }\r\n+   };\r\n+\r\n+   const handleTaskDeselect = (taskId) => {\r\n+      setSelectedTask(selectedTask.filter(id => id !== taskId));\r\n+   };\r\n+\r\n+   const handleTaskAssignment = (taskId, categoryIndex) => {\r\n+      // Asigna la tarea a la categoría específica\r\n+      // Actualiza el estado para reflejar la tarea asignada en el lugar correcto\r\n+      handleTaskSelect(taskId);\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input\r\n+                           type=\"checkbox\"\r\n+                           onChange={() => handleTaskSelect(task.id)}\r\n+                           disabled={selectedTask.includes(task.id)}\r\n+                        />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723484540021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,244 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input\r\n+                           type=\"checkbox\"\r\n+                           onChange={() => handleTaskSelect(task.id)}\r\n+                           disabled={selectedTask.includes(task.id)}\r\n+                        />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723484588298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,474 +241,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [selectedTask, setSelectedTask] = useState([]);\r\n-\r\n-   const handleTaskSelect = (taskId) => {\r\n-      if (!selectedTask.includes(taskId)) {\r\n-         setSelectedTask([...selectedTask, taskId]);\r\n-      }\r\n-   };\r\n-\r\n-   const handleTaskDeselect = (taskId) => {\r\n-      setSelectedTask(selectedTask.filter(id => id !== taskId));\r\n-   };\r\n-\r\n-   const handleTaskAssignment = (taskId, categoryIndex) => {\r\n-      // Asigna la tarea a la categoría específica\r\n-      // Actualiza el estado para reflejar la tarea asignada en el lugar correcto\r\n-      handleTaskSelect(taskId);\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input\r\n-                           type=\"checkbox\"\r\n-                           onChange={() => handleTaskSelect(task.id)}\r\n-                           disabled={selectedTask.includes(task.id)}\r\n-                        />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [selectedTask, setSelectedTask] = useState([]);\r\n-\r\n-   const handleTaskSelect = (taskId) => {\r\n-      if (!selectedTask.includes(taskId)) {\r\n-         setselectedTask([...selectedTask, taskId]);\r\n-      }\r\n-   };\r\n-\r\n-   const handleTaskDeselect = (taskId) => {\r\n-      setselectedTask(selectedTask.filter(id => id !== taskId));\r\n-   };\r\n-\r\n-   const handleTaskAssignment = (taskId, categoryIndex) => {\r\n-      // Asigna la tarea a la categoría específica\r\n-      // Actualiza el estado para reflejar la tarea asignada en el lugar correcto\r\n-      handleTaskSelect(taskId);\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input\r\n-                           type=\"checkbox\"\r\n-                           onChange={() => handleTaskSelect(task.id)}\r\n-                           disabled={selectedTask.includes(task.id)}\r\n-                        />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723484630460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,240 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723484682582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n                                     <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                               </td>\r\n                            ))}\r\n@@ -237,248 +237,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input\r\n-                           type=\"checkbox\"\r\n-                           onChange={() => handleTaskSelect(task.id)}\r\n-                           disabled={selectedTask.includes(task.id)}\r\n-                        />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723484694918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,243 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723484768376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723484783969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,8 @@\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n-\r\n                                  ))}\r\n                               </td>\r\n                            ))}\r\n                         </tr>\r\n@@ -243,487 +242,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723485478158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n             <div className=\"box header\">\r\n                <h2 className=\"title\">Tablero Kanban</h2>\r\n                <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n             </div>\r\n-            <div className='box'>\r\n+            <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n"
                },
                {
                    "date": 1723492917541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,245 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small pb-4\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723492945552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,253 +89,8 @@\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small pb-4\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n                <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n             </div>\r\n             <div className=\"box task-container\">\r\n                {tasks.map(task => (\r\n@@ -428,9 +183,9 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                 <button className=\"button is-primary is-rounded is-small pb-4\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n                                     <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box'>\r\n"
                },
                {
                    "date": 1723492959032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,13 +183,13 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small pb-4\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n                                     <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box'>\r\n+                                    <div className='task-box pt-4'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n                                  ))}\r\n                               </td>\r\n"
                },
                {
                    "date": 1723492965622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,245 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723492976931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n                      </thead>\r\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }} className='pb-4'>\r\n                                  <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n                                     <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n@@ -242,249 +242,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box pt-4'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723492985245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }} className='pb-4'>\r\n                                  <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                    <span className='has-text-primary-20-invert pb-4'>+</span>\r\n                                  </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n"
                },
                {
                    "date": 1723492991178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,245 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n+                                 </button>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723493001104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,255 +183,13 @@\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n+                                 <div className='pb-4'>\r\n \r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n                                  </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }} className='pb-4'>\r\n                                  <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert pb-4'>+</span>\r\n+                                    <span className='has-text-primary-20-invert'>+</span>\r\n                                  </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n"
                },
                {
                    "date": 1723493007856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,13 +184,13 @@\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n                                  <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n \r\n-                                 </div>\r\n-                                 <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                    <span className='has-text-primary-20-invert'>+</span>\r\n-                                 </button>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n"
                },
                {
                    "date": 1723495177951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723495388965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'black' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n@@ -245,252 +245,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723495398955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'black' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'pink' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495425457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'pink' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: '#C4E8F0' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495465510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: '#C4E8F0' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid black' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495480780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid black' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495503815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: 5px }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495521478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: 5px }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '5px' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495559877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,11 +173,11 @@\n             <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n-                        <tr>\r\n+                        <tr style={{backgroundColor: 'white'}}>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '5px' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '15px' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495573536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead style={{backgroundColor: 'white'}}>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '15px' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723495620110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead style={{backgroundColor: 'white'}}>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723495679667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n             <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead style={{backgroundColor: 'white'}}>\r\n-                        <tr>\r\n+                        <tr style={{borderRadius: '25px'}}>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n@@ -245,500 +245,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead style={{backgroundColor: 'white'}}>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '15px' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr style={{backgroundColor: 'white'}}>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '15px' }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723495696045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,10 @@\n             </div>\r\n             <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead style={{backgroundColor: 'white'}}>\r\n-                        <tr style={{borderRadius: '25px'}}>\r\n+                     <thead>\r\n+                        <tr>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n"
                },
                {
                    "date": 1723495763941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px', box-shadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'; }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723495892689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496031435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n@@ -245,252 +245,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px', box-shadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'; }}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496104723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                   <table className=\"table is-fullwidth table-kanban\">\r\n                      <thead>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{ textAlign: 'center', backgroundColor: 'white', border: '1px solid #C1C1C1', borderRadius: '25px' }}>{name || `Categoría ${index + 1}`}</th>\r\n+                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n"
                },
                {
                    "date": 1723496278522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,253 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: 'white',\r\n+                                 border: '1px solid #C1C1C1',\r\n+                                 borderRadius: '15px',\r\n+                                 boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'}}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496283794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,252 +250,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496301735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: 'white',\r\n+                                 borderRadius: '15px',\r\n+                                 boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'}}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496335465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: 'white',\r\n                                  borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'}}>{name || `Categoría ${index + 1}`}</th>\r\n+                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'}}>{name || `Categoría ${index + 1}`}</th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n@@ -249,257 +249,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: 'white',\r\n-                                 border: '1px solid #C1C1C1',\r\n-                                 borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px'}}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496357916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n             </div>\r\n             <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n+                     <thead className='p-4'>\r\n                         <tr>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n"
                },
                {
                    "date": 1723496374029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead className='p-4'>\r\n+                        <tr className='p-4'>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: 'white',\r\n+                                 borderRadius: '15px',\r\n+                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'}}>{name || `Categoría ${index + 1}`}</th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496386058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,10 @@\n             </div>\r\n             <div className='box tableroKanban'>\r\n                <div className=\"table-container is-fullwidth\">\r\n                   <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead className='p-4'>\r\n-                        <tr className='p-4'>\r\n+                     <thead>\r\n+                        <tr>\r\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: 'white',\r\n"
                },
                {
                    "date": 1723496531247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,22 +179,25 @@\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: 'white',\r\n                                  borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'}}>{name || `Categoría ${index + 1}`}</th>\r\n+                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n+                                 padding: '20px 0' // Aquí se ajusta el padding para hacer el thead más alto\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n                            ))}\r\n                         </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                         <tr>\r\n                            {categoryNames.map((_, index) => (\r\n                               <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n                                  <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n                                        <span className='has-text-primary-20-invert'>+</span>\r\n                                     </button>\r\n                                  </div>\r\n-\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n                                     <div className='task-box-2'>\r\n                                        <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n@@ -203,8 +206,9 @@\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n                   </table>\r\n+\r\n                </div>\r\n             </div>\r\n \r\n          </div>\r\n"
                },
                {
                    "date": 1723496548202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: 'white',\r\n+                                 borderRadius: '15px',\r\n+                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n+                                 height: '60px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496557527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,512 +255,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: 'white',\r\n-                                 borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n-                                 padding: '20px 0' // Aquí se ajusta el padding para hacer el thead más alto\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead className='p-4'>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: 'white',\r\n-                                 borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px'}}>{name || `Categoría ${index + 1}`}</th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)} >\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496565991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n                                  textAlign: 'center',\r\n                                  backgroundColor: 'white',\r\n                                  borderRadius: '15px',\r\n                                  boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n-                                 height: '60px', // Aquí se establece una altura fija\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n                               </th>\r\n"
                },
                {
                    "date": 1723496643269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,8 @@\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: 'white',\r\n                                  borderRadius: '15px',\r\n-                                 boxShadow: 'rgba(0, 0, 0, 0.35) 0px 5px 15px',\r\n                                  height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n"
                },
                {
                    "date": 1723496664748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 borderRadius: '15px',\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496689386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,9 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n+                                 width: '90%',\r\n                                  borderRadius: '15px',\r\n                                  height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n@@ -254,261 +255,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: 'white',\r\n-                                 borderRadius: '15px',\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496703577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 maxWidth: '90%',\r\n+                                 borderRadius: '15px',\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723496709564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n-                                 maxWidth: '90%',\r\n+                                 maxWidth: '40%',\r\n                                  borderRadius: '15px',\r\n                                  height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n@@ -255,262 +255,4 @@\n          )}\r\n       </div>\r\n    )\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 width: '90%',\r\n-                                 borderRadius: '15px',\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n"
                },
                {
                    "date": 1723496723355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,10 +178,9 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n-                                 maxWidth: '40%',\r\n-                                 borderRadius: '15px',\r\n+                                 /*borderRadius: '15px',*/\r\n                                  height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n"
                },
                {
                    "date": 1723502844145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,28 @@\n          tasksInCategory => tasksInCategory.includes(task)\r\n       );\r\n    };\r\n \r\n+   //Para cambiar de categoría con clic derecho\r\n+   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n+      event.preventDefault();\r\n+      // Mueve la tarea a la siguiente categoría\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n \r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         // Elimina la tarea de la categoría actual\r\n+         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n+\r\n+         // Añade la tarea a la siguiente categoría\r\n+         if (!newAssignedTasks[nextCategoryIndex]) {\r\n+            newAssignedTasks[nextCategoryIndex] = [];\r\n+         }\r\n+         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n+         return newAssignedTasks;\r\n+      });\r\n+   };\r\n+\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -178,9 +197,9 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n-                                 /*borderRadius: '15px',*/\r\n+                                 /* borderRadius: '15px',*/\r\n                                  height: '30px', // Aquí se establece una altura fija\r\n                                  verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n"
                },
                {
                    "date": 1723502912050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,281 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+   //Para cambiar de categoría con clic derecho\r\n+   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n+      event.preventDefault();\r\n+      // Mueve la tarea a la siguiente categoría\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n+\r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         // Elimina la tarea de la categoría actual\r\n+         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n+\r\n+         // Añade la tarea a la siguiente categoría\r\n+         if (!newAssignedTasks[nextCategoryIndex]) {\r\n+            newAssignedTasks[nextCategoryIndex] = [];\r\n+         }\r\n+         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n+         return newAssignedTasks;\r\n+      });\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 /* borderRadius: '15px',*/\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n+                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723502964322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,289 +83,23 @@\n          tasksInCategory => tasksInCategory.includes(task)\r\n       );\r\n    };\r\n \r\n-   //Para cambiar de categoría con clic derecho\r\n-   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n-      event.preventDefault();\r\n-      // Mueve la tarea a la siguiente categoría\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n-\r\n+   //Para \r\n+   const handleTaskClick = (taskId, categoryIndex) => {\r\n+      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n       setAssignedTasks((prev) => {\r\n          const newAssignedTasks = { ...prev };\r\n-         // Elimina la tarea de la categoría actual\r\n          newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-\r\n-         // Añade la tarea a la siguiente categoría\r\n-         if (!newAssignedTasks[nextCategoryIndex]) {\r\n-            newAssignedTasks[nextCategoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n          return newAssignedTasks;\r\n       });\r\n-   };\r\n \r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 /* borderRadius: '15px',*/\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n-                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n+      setIsCheckboxActive((prev) => ({\r\n+         ...prev,\r\n+         [taskId]: true, // Activa el checkbox nuevamente\r\n+      }));\r\n    };\r\n \r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n    //Para cambiar de categoría con clic derecho\r\n    const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n       event.preventDefault();\r\n       // Mueve la tarea a la siguiente categoría\r\n@@ -497,10 +231,15 @@\n                                        <span className='has-text-primary-20-invert'>+</span>\r\n                                     </button>\r\n                                  </div>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n+                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n                                  ))}\r\n                               </td>\r\n                            ))}\r\n"
                },
                {
                    "date": 1723503058721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,19 @@\n    const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n    const [assignedTasks, setAssignedTasks] = useState({});\r\n    const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n \r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n+   const handlePlusClick = (categoryIndex) => {\r\n+      // Activa todos los checkboxes\r\n+      setIsCheckboxActive((prev) => {\r\n+         const newState = { ...prev };\r\n+         tasks.forEach(task => {\r\n+            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n+               newState[task.id] = true;\r\n+            }\r\n+         });\r\n+         return newState;\r\n+      });\r\n    };\r\n \r\n    const handleTaskSelect = (task) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n"
                },
                {
                    "date": 1723503086188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,24 +73,25 @@\n          return newState;\r\n       });\r\n    };\r\n \r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n+   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n+      // Asigna la tarea a la categoría y desactiva el checkbox\r\n+      const selectedTask = tasks.find(task => task.id === taskId);\r\n \r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         if (!newAssignedTasks[categoryIndex]) {\r\n+            newAssignedTasks[categoryIndex] = [];\r\n+         }\r\n+         newAssignedTasks[categoryIndex].push(selectedTask);\r\n+         return newAssignedTasks;\r\n+      });\r\n \r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n+      setIsCheckboxActive((prev) => ({\r\n+         ...prev,\r\n+         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n+      }));\r\n    };\r\n \r\n    //Para \r\n    const handleTaskClick = (taskId, categoryIndex) => {\r\n"
                },
                {
                    "date": 1723503165516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,305 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (categoryIndex) => {\r\n+      // Activa todos los checkboxes\r\n+      setIsCheckboxActive((prev) => {\r\n+         const newState = { ...prev };\r\n+         tasks.forEach(task => {\r\n+            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n+               newState[task.id] = true;\r\n+            }\r\n+         });\r\n+         return newState;\r\n+      });\r\n+   };\r\n+\r\n+   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n+      // Asigna la tarea a la categoría y desactiva el checkbox\r\n+      const selectedTask = tasks.find(task => task.id === taskId);\r\n+\r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         if (!newAssignedTasks[categoryIndex]) {\r\n+            newAssignedTasks[categoryIndex] = [];\r\n+         }\r\n+         newAssignedTasks[categoryIndex].push(selectedTask);\r\n+         return newAssignedTasks;\r\n+      });\r\n+\r\n+      setIsCheckboxActive((prev) => ({\r\n+         ...prev,\r\n+         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n+      }));\r\n+   };\r\n+\r\n+   //Para \r\n+   const handleTaskClick = (taskId, categoryIndex) => {\r\n+      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n+         return newAssignedTasks;\r\n+      });\r\n+\r\n+      setIsCheckboxActive((prev) => ({\r\n+         ...prev,\r\n+         [taskId]: true, // Activa el checkbox nuevamente\r\n+      }));\r\n+   };\r\n+\r\n+   //Para cambiar de categoría con clic derecho\r\n+   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n+      event.preventDefault();\r\n+      // Mueve la tarea a la siguiente categoría\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n+\r\n+      setAssignedTasks((prev) => {\r\n+         const newAssignedTasks = { ...prev };\r\n+         // Elimina la tarea de la categoría actual\r\n+         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n+\r\n+         // Añade la tarea a la siguiente categoría\r\n+         if (!newAssignedTasks[nextCategoryIndex]) {\r\n+            newAssignedTasks[nextCategoryIndex] = [];\r\n+         }\r\n+         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n+         return newAssignedTasks;\r\n+      });\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type='checkbox' checked={!isCheckboxActive[task.id]} onChange={() => handleTaskCheckboxChange(task.id)} disabled={!isCheckboxActive[task.id]}/>\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 /* borderRadius: '15px',*/\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n+                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723503469587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n \r\n    //Para activar el check de las tareas\r\n    const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n    const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [isCheckboxActive, setIsCheckboxActive] = useState({});\r\n    const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n \r\n    const handlePlusClick = (categoryIndex) => {\r\n       // Activa todos los checkboxes\r\n"
                },
                {
                    "date": 1723503513257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,383 +58,36 @@\n \r\n    //Para activar el check de las tareas\r\n    const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n    const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [isCheckboxActive, setIsCheckboxActive] = useState({});\r\n    const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n \r\n-   const handlePlusClick = (categoryIndex) => {\r\n-      // Activa todos los checkboxes\r\n-      setIsCheckboxActive((prev) => {\r\n-         const newState = { ...prev };\r\n-         tasks.forEach(task => {\r\n-            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n-               newState[task.id] = true;\r\n-            }\r\n-         });\r\n-         return newState;\r\n-      });\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n    };\r\n \r\n-   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n-      // Asigna la tarea a la categoría y desactiva el checkbox\r\n-      const selectedTask = tasks.find(task => task.id === taskId);\r\n-\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         if (!newAssignedTasks[categoryIndex]) {\r\n-            newAssignedTasks[categoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[categoryIndex].push(selectedTask);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n-      }));\r\n-   };\r\n-\r\n-   //Para \r\n-   const handleTaskClick = (taskId, categoryIndex) => {\r\n-      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: true, // Activa el checkbox nuevamente\r\n-      }));\r\n-   };\r\n-\r\n-   //Para cambiar de categoría con clic derecho\r\n-   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n-      event.preventDefault();\r\n-      // Mueve la tarea a la siguiente categoría\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n-\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         // Elimina la tarea de la categoría actual\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-\r\n-         // Añade la tarea a la siguiente categoría\r\n-         if (!newAssignedTasks[nextCategoryIndex]) {\r\n-            newAssignedTasks[nextCategoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n-         return newAssignedTasks;\r\n-      });\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type='checkbox' checked={!isCheckboxActive[task.id]} onChange={() => handleTaskCheckboxChange(task.id)} disabled={!isCheckboxActive[task.id]}/>\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 /* borderRadius: '15px',*/\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n-                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n       }\r\n-   };\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n \r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n    };\r\n \r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n    };\r\n \r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (categoryIndex) => {\r\n-      // Activa todos los checkboxes\r\n-      setIsCheckboxActive((prev) => {\r\n-         const newState = { ...prev };\r\n-         tasks.forEach(task => {\r\n-            if (!Object.values(assignedTasks).flat().some(t => t.id === task.id)) {\r\n-               newState[task.id] = true;\r\n-            }\r\n-         });\r\n-         return newState;\r\n-      });\r\n-   };\r\n-\r\n-   const handleTaskCheckboxChange = (taskId, categoryIndex) => {\r\n-      // Asigna la tarea a la categoría y desactiva el checkbox\r\n-      const selectedTask = tasks.find(task => task.id === taskId);\r\n-\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         if (!newAssignedTasks[categoryIndex]) {\r\n-            newAssignedTasks[categoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[categoryIndex].push(selectedTask);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: false, // Desactiva el checkbox para la tarea seleccionada\r\n-      }));\r\n-   };\r\n-\r\n-   //Para \r\n-   const handleTaskClick = (taskId, categoryIndex) => {\r\n-      // Elimina la tarea de la categoría y activa su checkbox nuevamente\r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-         return newAssignedTasks;\r\n-      });\r\n-\r\n-      setIsCheckboxActive((prev) => ({\r\n-         ...prev,\r\n-         [taskId]: true, // Activa el checkbox nuevamente\r\n-      }));\r\n-   };\r\n-\r\n    //Para cambiar de categoría con clic derecho\r\n-   const handleTaskRightClick = (event, taskId, categoryIndex) => {\r\n-      event.preventDefault();\r\n-      // Mueve la tarea a la siguiente categoría\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryNames.length;\r\n+   \r\n \r\n-      setAssignedTasks((prev) => {\r\n-         const newAssignedTasks = { ...prev };\r\n-         // Elimina la tarea de la categoría actual\r\n-         newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(task => task.id !== taskId);\r\n-\r\n-         // Añade la tarea a la siguiente categoría\r\n-         if (!newAssignedTasks[nextCategoryIndex]) {\r\n-            newAssignedTasks[nextCategoryIndex] = [];\r\n-         }\r\n-         newAssignedTasks[nextCategoryIndex].push(tasks.find(task => task.id === taskId));\r\n-         return newAssignedTasks;\r\n-      });\r\n-   };\r\n-\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -546,15 +199,10 @@\n                                        <span className='has-text-primary-20-invert'>+</span>\r\n                                     </button>\r\n                                  </div>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskClick(task.id, categoryIndex)}\r\n-                                       onContextMenu={(event) => handleTaskRightClick(event, task.id, categoryIndex)}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n                                  ))}\r\n                               </td>\r\n                            ))}\r\n"
                },
                {
                    "date": 1723503658846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   //BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   //Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   //Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   //Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n+                        <span className='subtitle is-6'>{task.title}</span>\r\n+                     </label>\r\n+\r\n+                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div class=\"field\">\r\n+                        <label class=\"label\">Descripción</label>\r\n+                        <div class=\"control\">\r\n+                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Vencimiento</label>\r\n+                              <div class=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div class=\"field\">\r\n+                              <label class=\"label\">Importancia</label>\r\n+                              <div class=\"control\">\r\n+                                 <div class=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+\r\n+\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+\r\n+\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 /* borderRadius: '15px',*/\r\n+                                 height: '30px', // Aquí se establece una altura fija\r\n+                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div className='task-box-2'>\r\n+                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+\r\n+\r\n+               </div>\r\n+            </div>\r\n+\r\n+         </div>\r\n+\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de categorías</label>\r\n+                        <div className=\"control pb-4\">\r\n+                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        </div>\r\n+\r\n+                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n+                           {categoryNames.map((category, index) => (\r\n+                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n+                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                    placeholder={`Categoría ${index + 1}`}\r\n+                                 />\r\n+                              </div>\r\n+                           ))}\r\n+                        </div>\r\n+\r\n+\r\n+\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   )\r\n+}\r\n"
                },
                {
                    "date": 1723503993872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n    const toggleModalCatOpen = () => {\r\n       setModalCatOpen(!isModalCatOpen);\r\n    }\r\n \r\n-   //BD\r\n+   // BD\r\n    const [tasks, setTasks] = useState([]);\r\n    useEffect(() => {\r\n       axios.get('../../db.json')\r\n          .then(response => {\r\n@@ -23,9 +23,9 @@\n             console.error('Error fetching tasks:', error);\r\n          });\r\n    }, []);\r\n \r\n-   //Para las categorías del tablero\r\n+   // Para las categorías del tablero\r\n    const [categoryCount, setCategoryCount] = useState(3);\r\n    const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n \r\n    const handleCategoryCountChange = (event) => {\r\n@@ -49,15 +49,15 @@\n       newCategories[index] = event.target.value;\r\n       setCategoryNames(newCategories);\r\n    };\r\n \r\n-   //Para dibujar la tabla según las categorías\r\n+   // Para dibujar la tabla según las categorías\r\n    const handleCreateBoard = () => {\r\n       // Cerrar el modal\r\n       toggleModalCatOpen();\r\n    };\r\n \r\n-   //Para activar el check de las tareas\r\n+   // Para activar el check de las tareas\r\n    const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n    const [assignedTasks, setAssignedTasks] = useState({});\r\n    const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n \r\n@@ -83,267 +83,28 @@\n          tasksInCategory => tasksInCategory.includes(task)\r\n       );\r\n    };\r\n \r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n-                     </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-\r\n-\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-\r\n-\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 /* borderRadius: '15px',*/\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-\r\n-\r\n-               </div>\r\n-            </div>\r\n-\r\n-         </div>\r\n-\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n-                        </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n-                        </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   )\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   //BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   //Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n    };\r\n \r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   //Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   //Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      \r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n       }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n       setAssignedTasks(newAssignedTasks);\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n    };\r\n \r\n-   const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n-   };\r\n-\r\n-   //Para cambiar de categoría con clic derecho\r\n-   \r\n-\r\n    return (\r\n       <div className=\"columns p-4\">\r\n          <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n             <div className=\"box\">\r\n@@ -356,10 +117,8 @@\n                      <label className=\"checkbox\">\r\n                         <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n                         <span className='subtitle is-6'>{task.title}</span>\r\n                      </label>\r\n-\r\n-                     {/* <h2 className='subtitle is-6'>{task.title}</h2> */}\r\n                   </div>\r\n                ))}\r\n             </div>\r\n          </div>\r\n@@ -377,28 +136,28 @@\n                         <div className=\"control\">\r\n                            <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n                         </div>\r\n                      </div>\r\n-                     <div class=\"field\">\r\n-                        <label class=\"label\">Descripción</label>\r\n-                        <div class=\"control\">\r\n-                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n                         </div>\r\n                      </div>\r\n                      <div className='columns'>\r\n                         <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Vencimiento</label>\r\n-                              <div class=\"control\">\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n                                  <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n                               </div>\r\n                            </div>\r\n                         </div>\r\n                         <div className='column is-half'>\r\n-                           <div class=\"field\">\r\n-                              <label class=\"label\">Importancia</label>\r\n-                              <div class=\"control\">\r\n-                                 <div class=\"select is-fullwidth is-text\">\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n                                     <select>\r\n                                        <option>Urgente</option>\r\n                                        <option>Alta</option>\r\n                                        <option>Media</option>\r\n@@ -408,10 +167,8 @@\n                               </div>\r\n                            </div>\r\n                         </div>\r\n                      </div>\r\n-\r\n-\r\n                   </section>\r\n                   <footer className=\"modal-card-foot\">\r\n                      <div className=\"buttons\">\r\n                         <button className=\"button is-success\">Guardar</button>\r\n@@ -420,10 +177,8 @@\n                   </footer>\r\n                </div>\r\n             </div>\r\n          )}\r\n-\r\n-\r\n          <div className=\"column\" id=\"panel-board\">\r\n             <div className=\"box header\">\r\n                <h2 className=\"title\">Tablero Kanban</h2>\r\n                <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n@@ -436,11 +191,10 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n-                                 /* borderRadius: '15px',*/\r\n-                                 height: '30px', // Aquí se establece una altura fija\r\n-                                 verticalAlign: 'middle' // Para alinear el contenido verticalmente en el centro\r\n+                                 height: '30px', \r\n+                                 verticalAlign: 'middle'\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n                               </th>\r\n                            ))}\r\n@@ -455,61 +209,70 @@\n                                        <span className='has-text-primary-20-invert'>+</span>\r\n                                     </button>\r\n                                  </div>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div className='task-box-2'>\r\n-                                       <span key={taskIndex} className='subtitle is-6'>{task.title}</span>\r\n+                                    <div \r\n+                                       key={taskIndex} \r\n+                                       className='task-box-2' \r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault(); \r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n                                  ))}\r\n                               </td>\r\n                            ))}\r\n                         </tr>\r\n                      </tbody>\r\n                   </table>\r\n-\r\n-\r\n                </div>\r\n             </div>\r\n-\r\n          </div>\r\n-\r\n          {isModalCatOpen && (\r\n             <div className=\"modal is-active\">\r\n                <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n                <div className=\"modal-card\">\r\n                   <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n                      <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n                   </header>\r\n                   <section className=\"modal-card-body\">\r\n                      <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de categorías</label>\r\n-                        <div className=\"control pb-4\">\r\n-                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n                         </div>\r\n-\r\n-                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n-                           {categoryNames.map((category, index) => (\r\n-                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n-                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                    placeholder={`Categoría ${index + 1}`}\r\n-                                 />\r\n-                              </div>\r\n-                           ))}\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n                         </div>\r\n-\r\n-\r\n-\r\n-                     </div>\r\n+                     ))}\r\n                   </section>\r\n                   <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                     </div>\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n                   </footer>\r\n                </div>\r\n             </div>\r\n          )}\r\n       </div>\r\n-   )\r\n+   );\r\n }\r\n"
                },
                {
                    "date": 1723504311046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,11 @@\n    const handleTaskRemove = (task, categoryIndex) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n       newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n       setAssignedTasks(newAssignedTasks);\r\n+\r\n+      // Para desmarcar el checkbox al remover la tarea\r\n+      setActiveCheckboxes(false);\r\n    };\r\n \r\n    // Mover tarea a la siguiente categoría\r\n    const handleTaskMoveToNext = (task, categoryIndex) => {\r\n"
                },
                {
                    "date": 1723568473372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,41 +65,65 @@\n       setActiveCheckboxes(true);\r\n       setSelectedCategoryIndex(index);\r\n    };\r\n \r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n    const handleTaskSelect = (task) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n       if (!newAssignedTasks[selectedCategoryIndex]) {\r\n          newAssignedTasks[selectedCategoryIndex] = [];\r\n       }\r\n       newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n       setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n \r\n       setActiveCheckboxes(false);\r\n       setSelectedCategoryIndex(null);\r\n    };\r\n \r\n    const isTaskAssigned = (task) => {\r\n-      return Object.values(assignedTasks).some(\r\n+      /*return Object.values(assignedTasks).some(\r\n          tasksInCategory => tasksInCategory.includes(task)\r\n-      );\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n    };\r\n \r\n    // Remover tarea de la categoría\r\n    const handleTaskRemove = (task, categoryIndex) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n       newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n       setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n \r\n-      // Para desmarcar el checkbox al remover la tarea\r\n-      setActiveCheckboxes(false);\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n    };\r\n \r\n    // Mover tarea a la siguiente categoría\r\n    const handleTaskMoveToNext = (task, categoryIndex) => {\r\n       const newAssignedTasks = { ...assignedTasks };\r\n       newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      \r\n+\r\n       const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n       if (!newAssignedTasks[nextCategoryIndex]) {\r\n          newAssignedTasks[nextCategoryIndex] = [];\r\n       }\r\n@@ -117,10 +141,13 @@\n             <div className=\"box task-container\">\r\n                {tasks.map(task => (\r\n                   <div key={task.id} className='task-box'>\r\n                      <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskSelect(task)} />\r\n-                        <span className='subtitle is-6'>{task.title}</span>\r\n+                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n+                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n+                           &nbsp;{task.title}\r\n+                        </span>\r\n                      </label>\r\n                   </div>\r\n                ))}\r\n             </div>\r\n@@ -194,9 +221,9 @@\n                            {categoryNames.map((name, index) => (\r\n                               <th key={index} style={{\r\n                                  textAlign: 'center',\r\n                                  backgroundColor: '#EBECF0',\r\n-                                 height: '30px', \r\n+                                 height: '30px',\r\n                                  verticalAlign: 'middle'\r\n                               }}>\r\n                                  {name || `Categoría ${index + 1}`}\r\n                               </th>\r\n@@ -212,14 +239,14 @@\n                                        <span className='has-text-primary-20-invert'>+</span>\r\n                                     </button>\r\n                                  </div>\r\n                                  {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div \r\n-                                       key={taskIndex} \r\n-                                       className='task-box-2' \r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n                                        onClick={() => handleTaskRemove(task, index)}\r\n                                        onContextMenu={(e) => {\r\n-                                          e.preventDefault(); \r\n+                                          e.preventDefault();\r\n                                           handleTaskMoveToNext(task, index);\r\n                                        }}\r\n                                     >\r\n                                        <span className='subtitle is-6'>{task.title}</span>\r\n"
                },
                {
                    "date": 1723570945579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,308 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n+                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n+                           &nbsp;{task.title}\r\n+                        </span>\r\n+                     </label>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723579412266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,309 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom'; \r\n+\r\n+export const TaskBoard = () => {\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map(task => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n+                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n+                           &nbsp;{task.title}\r\n+                        </span>\r\n+                     </label>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723579466263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,317 +1,20 @@\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n-import { useParams } from 'react-router-dom'; \r\n+import { useParams } from 'react-router-dom';\r\n \r\n export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n \r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n-                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n-                           &nbsp;{task.title}\r\n-                        </span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n \r\n    const toggleModalOpen = () => {\r\n@@ -614,312 +317,4 @@\n          )}\r\n       </div>\r\n    );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n-                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n-                           &nbsp;{task.title}\r\n-                        </span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n"
                },
                {
                    "date": 1723579483170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,13 @@\n          console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n \r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n    const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n \r\n    const toggleModalOpen = () => {\r\n"
                },
                {
                    "date": 1723579634696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n    const fetchTasks = async () => {\r\n       try {\r\n          const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n          setTasks(response.data);\r\n+         console.log(response.data);\r\n       } catch (error) {\r\n          console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n"
                },
                {
                    "date": 1723579710537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n                <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n                <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n             </div>\r\n             <div className=\"box task-container\">\r\n-               {tasks.map(task => (\r\n+               {tasks.map((task) => (\r\n                   <div key={task.id} className='task-box'>\r\n                      <label className=\"checkbox\">\r\n                         <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n                         <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n"
                },
                {
                    "date": 1723579721858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map((task) => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n+                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n+                           &nbsp;{task.title}\r\n+                        </span>\r\n+                     </label>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723579728339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,330 +323,4 @@\n          )}\r\n       </div>\r\n    );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map((task) => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n-                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n-                           &nbsp;{task.title}\r\n-                        </span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n"
                },
                {
                    "date": 1723579754121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // BD\r\n+   const [tasks, setTasks] = useState([]);\r\n+   useEffect(() => {\r\n+      axios.get('../../db.json')\r\n+         .then(response => {\r\n+            setTasks(response.data.tasks);\r\n+         })\r\n+         .catch(error => {\r\n+            console.error('Error fetching tasks:', error);\r\n+         });\r\n+   }, []);\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n+            <div className=\"box\">\r\n+               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n+               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n+            </div>\r\n+            <div className=\"box task-container\">\r\n+               {tasks.map((task) => (\r\n+                  <div key={task.id} className='task-box'>\r\n+                     <label className=\"checkbox\">\r\n+                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n+                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n+                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n+                           &nbsp;{task.title}\r\n+                        </span>\r\n+                     </label>\r\n+                  </div>\r\n+               ))}\r\n+            </div>\r\n+         </div>\r\n+         {isModalOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Título</label>\r\n+                        <div className=\"control\">\r\n+                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Descripción</label>\r\n+                        <div className=\"control\">\r\n+                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className='columns'>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Vencimiento</label>\r\n+                              <div className=\"control\">\r\n+                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                        <div className='column is-half'>\r\n+                           <div className=\"field\">\r\n+                              <label className=\"label\">Importancia</label>\r\n+                              <div className=\"control\">\r\n+                                 <div className=\"select is-fullwidth is-text\">\r\n+                                    <select>\r\n+                                       <option>Urgente</option>\r\n+                                       <option>Alta</option>\r\n+                                       <option>Media</option>\r\n+                                       <option>Baja</option>\r\n+                                    </select>\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        </div>\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <div className=\"buttons\">\r\n+                        <button className=\"button is-success\">Guardar</button>\r\n+                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n+                     </div>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723580029672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,339 +4,15 @@\n \r\n export const TaskBoard = () => {\r\n    //FILTRO DE TAREAS POR SPACE\r\n    const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // BD\r\n    const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n \r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map((task) => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n-                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n-                           &nbsp;{task.title}\r\n-                        </span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n    const fetchTasks = async () => {\r\n       try {\r\n          const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n          setTasks(response.data);\r\n-         //console.log(response.data);\r\n+         console.log(response.data);\r\n       } catch (error) {\r\n          console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n@@ -355,20 +31,8 @@\n    const toggleModalCatOpen = () => {\r\n       setModalCatOpen(!isModalCatOpen);\r\n    }\r\n \r\n-   // BD\r\n-   const [tasks, setTasks] = useState([]);\r\n-   useEffect(() => {\r\n-      axios.get('../../db.json')\r\n-         .then(response => {\r\n-            setTasks(response.data.tasks);\r\n-         })\r\n-         .catch(error => {\r\n-            console.error('Error fetching tasks:', error);\r\n-         });\r\n-   }, []);\r\n-\r\n    // Para las categorías del tablero\r\n    const [categoryCount, setCategoryCount] = useState(3);\r\n    const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n \r\n"
                },
                {
                    "date": 1723580035419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n    const fetchTasks = async () => {\r\n       try {\r\n          const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n          setTasks(response.data);\r\n-         console.log(response.data);\r\n+         //console.log(response.data);\r\n       } catch (error) {\r\n          console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n"
                },
                {
                    "date": 1723586040683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n import { useParams } from 'react-router-dom';\r\n \r\n+import { Task } from './Task';\r\n+import { Board } from './Board';\r\n+\r\n export const TaskBoard = () => {\r\n    //FILTRO DE TAREAS POR SPACE\r\n    const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n    const [tasks, setTasks] = useState([]);\r\n"
                },
                {
                    "date": 1723586175333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n import { useParams } from 'react-router-dom';\r\n \r\n-import { Task } from './Task';\r\n-import { Board } from './Board';\r\n \r\n export const TaskBoard = () => {\r\n    //FILTRO DE TAREAS POR SPACE\r\n    const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n"
                },
                {
                    "date": 1723586288455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,317 +1,83 @@\n import React, { useState, useEffect } from 'react';\r\n import axios from 'axios';\r\n import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+import { Board } from './Board';\r\n \r\n-\r\n export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const { spaceId } = useParams();\r\n    const [tasks, setTasks] = useState([]);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n \r\n    const fetchTasks = async () => {\r\n       try {\r\n          const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n          setTasks(response.data);\r\n-         //console.log(response.data);\r\n       } catch (error) {\r\n          console.error(\"Error obteniendo las tareas:\", error);\r\n       }\r\n    };\r\n \r\n    useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n+      fetchTasks();\r\n    }, [spaceId]);\r\n \r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n    const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n+      // Lógica para cambiar el número de categorías\r\n    };\r\n \r\n    const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n+      // Lógica para cambiar el nombre de la categoría\r\n    };\r\n \r\n-   // Para dibujar la tabla según las categorías\r\n    const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n+      // Lógica para crear el tablero\r\n    };\r\n \r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n    const handlePlusClick = (index) => {\r\n       setActiveCheckboxes(true);\r\n       setSelectedCategoryIndex(index);\r\n    };\r\n \r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n    const handleTaskChange = (task) => {\r\n       if (task.isChecked) {\r\n          handleTaskRemove(task, selectedCategoryIndex);\r\n       } else {\r\n          handleTaskSelect(task);\r\n       }\r\n    };\r\n \r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+   const handleTaskSelect = (task) => {\r\n+      // Lógica para seleccionar la tarea\r\n+   };\r\n \r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      // Lógica para eliminar la tarea\r\n    };\r\n \r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      // Lógica para mover la tarea a la siguiente categoría\r\n+   };\r\n+\r\n    return (\r\n       <div className=\"columns p-4\">\r\n-         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n-            <div className=\"box\">\r\n-               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n-               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n-            </div>\r\n-            <div className=\"box task-container\">\r\n-               {tasks.map((task) => (\r\n-                  <div key={task.id} className='task-box'>\r\n-                     <label className=\"checkbox\">\r\n-                        <input type=\"checkbox\" checked={task.isChecked || false} disabled={!activeCheckboxes || isTaskAssigned(task)} onChange={() => handleTaskChange(task)} />\r\n-                        <span className={`subtitle is-6 ${task.isChecked ? 'has-text-grey-light' : ''}`}\r\n-                           style={{ textDecoration: task.isChecked ? 'line-through' : 'none' }} >\r\n-                           &nbsp;{task.title}\r\n-                        </span>\r\n-                     </label>\r\n-                  </div>\r\n-               ))}\r\n-            </div>\r\n-         </div>\r\n-         {isModalOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Título</label>\r\n-                        <div className=\"control\">\r\n-                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Descripción</label>\r\n-                        <div className=\"control\">\r\n-                           <textarea className=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className='columns'>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Vencimiento</label>\r\n-                              <div className=\"control\">\r\n-                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                        <div className='column is-half'>\r\n-                           <div className=\"field\">\r\n-                              <label className=\"label\">Importancia</label>\r\n-                              <div className=\"control\">\r\n-                                 <div className=\"select is-fullwidth is-text\">\r\n-                                    <select>\r\n-                                       <option>Urgente</option>\r\n-                                       <option>Alta</option>\r\n-                                       <option>Media</option>\r\n-                                       <option>Baja</option>\r\n-                                    </select>\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        </div>\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <div className=\"buttons\">\r\n-                        <button className=\"button is-success\">Guardar</button>\r\n-                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n-                     </div>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n+         <Task\r\n+            toggleModalOpen={() => {}}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <Board\r\n+            categoryNames={categoryNames}\r\n+            assignedTasks={assignedTasks}\r\n+            handlePlusClick={handlePlusClick}\r\n+            handleTaskRemove={handleTaskRemove}\r\n+            handleTaskMoveToNext={handleTaskMoveToNext}\r\n+            toggleModalCatOpen={() => {}}\r\n+         />\r\n       </div>\r\n    );\r\n }\r\n"
                },
                {
                    "date": 1723586694241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const [tasks, setTasks] = useState([]);\r\n+\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <Task\r\n+            toggleModalOpen={() => {}}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723587085155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,248 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const [tasks, setTasks] = useState([]);\r\n+\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <Task\r\n+            toggleModalOpen={() => {}}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div key={index} className=\"field\">\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723587384445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const [tasks, setTasks] = useState([]);\r\n+\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <Task\r\n+            toggleModalOpen={() => { }}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     {categoryNames.map((name, index) => (\r\n+                        <div\r\n+                           key={index}\r\n+                           className={`field ${categoryNames.length % 2 !== 0 && index === categoryNames.length - 1 ? 'full-width' : 'half-width'}`}\r\n+                        >\r\n+                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                           <div className=\"control\">\r\n+                              <input\r\n+                                 className=\"input\"\r\n+                                 type=\"text\"\r\n+                                 value={name}\r\n+                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                 placeholder={`Categoría ${index + 1}`}\r\n+                              />\r\n+                           </div>\r\n+                        </div>\r\n+                     ))}\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723587612580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,25 +220,26 @@\n                               min=\"3\"\r\n                            />\r\n                         </div>\r\n                      </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div\r\n-                           key={index}\r\n-                           className={`field ${categoryNames.length % 2 !== 0 && index === categoryNames.length - 1 ? 'full-width' : 'half-width'}`}\r\n-                        >\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n+                     <div className=\"columns is-multiline\">\r\n+                        {categoryNames.map((name, index) => (\r\n+                           <div key={index} className=\"column is-half\">\r\n+                              <div className=\"field\">\r\n+                                 <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                                 <div className=\"control\">\r\n+                                    <input\r\n+                                       className=\"input\"\r\n+                                       type=\"text\"\r\n+                                       value={name}\r\n+                                       onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                       placeholder={`Categoría ${index + 1}`}\r\n+                                    />\r\n+                                 </div>\r\n+                              </div>\r\n                            </div>\r\n-                        </div>\r\n-                     ))}\r\n+                        ))}\r\n+                     </div>\r\n                   </section>\r\n                   <footer className=\"modal-card-foot\">\r\n                      <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n                      <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n"
                },
                {
                    "date": 1723587653981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const [tasks, setTasks] = useState([]);\r\n+\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas al montar el componente\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <Task\r\n+            toggleModalOpen={() => { }}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control is-text\">\r\n+                           <input\r\n+                              className=\"input\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"columns is-multiline\">\r\n+                        {categoryNames.map((name, index) => (\r\n+                           <div key={index} className=\"column is-half\">\r\n+                              <div className=\"field\">\r\n+                                 <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                                 <div className=\"control\">\r\n+                                    <input\r\n+                                       className=\"input\"\r\n+                                       type=\"text\"\r\n+                                       value={name}\r\n+                                       onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                       placeholder={`Categoría ${index + 1}`}\r\n+                                    />\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        ))}\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723587662359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,11 +210,11 @@\n                   </header>\r\n                   <section className=\"modal-card-body\">\r\n                      <div className=\"field\">\r\n                         <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control is-text\">\r\n+                        <div className=\"control \">\r\n                            <input\r\n-                              className=\"input\"\r\n+                              className=\"input is-text\"\r\n                               type=\"number\"\r\n                               value={categoryCount}\r\n                               onChange={handleCategoryCountChange}\r\n                               min=\"3\"\r\n@@ -249,835 +249,4 @@\n          )}\r\n       </div>\r\n    );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-import { Task } from './Task';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const [tasks, setTasks] = useState([]);\r\n-\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         //console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <Task\r\n-            toggleModalOpen={() => { }}\r\n-            activeCheckboxes={activeCheckboxes}\r\n-            handleTaskChange={handleTaskChange}\r\n-            tasks={tasks}\r\n-         />\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"columns is-multiline\">\r\n-                        {categoryNames.map((name, index) => (\r\n-                           <div key={index} className=\"column is-half\">\r\n-                              <div className=\"field\">\r\n-                                 <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                                 <div className=\"control\">\r\n-                                    <input\r\n-                                       className=\"input\"\r\n-                                       type=\"text\"\r\n-                                       value={name}\r\n-                                       onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                       placeholder={`Categoría ${index + 1}`}\r\n-                                    />\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        ))}\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-import { Task } from './Task';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const [tasks, setTasks] = useState([]);\r\n-\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         //console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <Task\r\n-            toggleModalOpen={() => {}}\r\n-            activeCheckboxes={activeCheckboxes}\r\n-            handleTaskChange={handleTaskChange}\r\n-            tasks={tasks}\r\n-         />\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-import { Task } from './Task';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const [tasks, setTasks] = useState([]);\r\n-\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         //console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <Task\r\n-            toggleModalOpen={() => {}}\r\n-            activeCheckboxes={activeCheckboxes}\r\n-            handleTaskChange={handleTaskChange}\r\n-            tasks={tasks}\r\n-         />\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control\">\r\n-                           <input\r\n-                              className=\"input\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     {categoryNames.map((name, index) => (\r\n-                        <div key={index} className=\"field\">\r\n-                           <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                           <div className=\"control\">\r\n-                              <input\r\n-                                 className=\"input\"\r\n-                                 type=\"text\"\r\n-                                 value={name}\r\n-                                 onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                 placeholder={`Categoría ${index + 1}`}\r\n-                              />\r\n-                           </div>\r\n-                        </div>\r\n-                     ))}\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-import { Task } from './Task';\r\n-import { Board } from './Board';\r\n-\r\n-export const TaskBoard = () => {\r\n-   const { spaceId } = useParams();\r\n-   const [tasks, setTasks] = useState([]);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks();\r\n-   }, [spaceId]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      // Lógica para cambiar el número de categorías\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      // Lógica para cambiar el nombre de la categoría\r\n-   };\r\n-\r\n-   const handleCreateBoard = () => {\r\n-      // Lógica para crear el tablero\r\n-   };\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      // Lógica para seleccionar la tarea\r\n-   };\r\n-\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      // Lógica para eliminar la tarea\r\n-   };\r\n-\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      // Lógica para mover la tarea a la siguiente categoría\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <Task\r\n-            toggleModalOpen={() => {}}\r\n-            activeCheckboxes={activeCheckboxes}\r\n-            handleTaskChange={handleTaskChange}\r\n-            tasks={tasks}\r\n-         />\r\n-         <Board\r\n-            categoryNames={categoryNames}\r\n-            assignedTasks={assignedTasks}\r\n-            handlePlusClick={handlePlusClick}\r\n-            handleTaskRemove={handleTaskRemove}\r\n-            handleTaskMoveToNext={handleTaskMoveToNext}\r\n-            toggleModalCatOpen={() => {}}\r\n-         />\r\n-      </div>\r\n-   );\r\n-}\r\n"
                },
                {
                    "date": 1723598436873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n       }\r\n    };\r\n \r\n    useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas al montar el componente\r\n+      fetchTasks(); // Cargar tareas\r\n    }, [spaceId]);\r\n \r\n \r\n    const [isModalOpen, setModalOpen] = useState(false);\r\n"
                },
                {
                    "date": 1723598843708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,20 +80,20 @@\n       return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n    };\r\n \r\n    const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n+      const newAssignedTasks = { ...assignedTasks }; //Copia del estado (oper propa)\r\n       if (!newAssignedTasks[selectedCategoryIndex]) {\r\n          newAssignedTasks[selectedCategoryIndex] = [];\r\n       }\r\n       newAssignedTasks[selectedCategoryIndex].push(task);\r\n \r\n       setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n+      /*setTasks(prevTasks =>\r\n          prevTasks.map(t =>\r\n             t.id === task.id ? { ...t, isChecked: true } : t\r\n          )\r\n-      );\r\n+      );*/\r\n \r\n       setActiveCheckboxes(false);\r\n       setSelectedCategoryIndex(null);\r\n    };\r\n"
                },
                {
                    "date": 1723598851541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useState, useEffect } from 'react';\r\n+import axios from 'axios';\r\n+import { useParams } from 'react-router-dom';\r\n+import { Task } from './Task';\r\n+\r\n+export const TaskBoard = () => {\r\n+   //FILTRO DE TAREAS POR SPACE\r\n+   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n+   const [tasks, setTasks] = useState([]);\r\n+\r\n+   const fetchTasks = async () => {\r\n+      try {\r\n+         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n+         setTasks(response.data);\r\n+         //console.log(response.data);\r\n+      } catch (error) {\r\n+         console.error(\"Error obteniendo las tareas:\", error);\r\n+      }\r\n+   };\r\n+\r\n+   useEffect(() => {\r\n+      fetchTasks(); // Cargar tareas\r\n+   }, [spaceId]);\r\n+\r\n+\r\n+   const [isModalOpen, setModalOpen] = useState(false);\r\n+   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n+\r\n+   const toggleModalOpen = () => {\r\n+      setModalOpen(!isModalOpen);\r\n+   }\r\n+   const toggleModalCatOpen = () => {\r\n+      setModalCatOpen(!isModalCatOpen);\r\n+   }\r\n+\r\n+   // Para las categorías del tablero\r\n+   const [categoryCount, setCategoryCount] = useState(3);\r\n+   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n+\r\n+   const handleCategoryCountChange = (event) => {\r\n+      const count = parseInt(event.target.value, 10);\r\n+\r\n+      setCategoryCount(count);\r\n+\r\n+      if (count > categoryNames.length) {\r\n+         const newCategories = [...categoryNames];\r\n+         while (newCategories.length < count) {\r\n+            newCategories.push(\"\");\r\n+         }\r\n+         setCategoryNames(newCategories);\r\n+      } else if (count < categoryNames.length) {\r\n+         setCategoryNames(categoryNames.slice(0, count));\r\n+      }\r\n+   };\r\n+\r\n+   const handleCategoryNameChange = (index, event) => {\r\n+      const newCategories = [...categoryNames];\r\n+      newCategories[index] = event.target.value;\r\n+      setCategoryNames(newCategories);\r\n+   };\r\n+\r\n+   // Para dibujar la tabla según las categorías\r\n+   const handleCreateBoard = () => {\r\n+      // Cerrar el modal\r\n+      toggleModalCatOpen();\r\n+   };\r\n+\r\n+   // Para activar el check de las tareas\r\n+   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n+   const [assignedTasks, setAssignedTasks] = useState({});\r\n+   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n+\r\n+   const handlePlusClick = (index) => {\r\n+      setActiveCheckboxes(true);\r\n+      setSelectedCategoryIndex(index);\r\n+   };\r\n+\r\n+   const isTaskDisabled = (task) => {\r\n+      // Verifica si la tarea está en cualquier categoría\r\n+      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n+   };\r\n+\r\n+   const handleTaskSelect = (task) => {\r\n+      const newAssignedTasks = { ...assignedTasks }; //Copia del estado (oper propa)\r\n+      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n+         newAssignedTasks[selectedCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[selectedCategoryIndex].push(task);\r\n+\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: true } : t\r\n+         )\r\n+      );\r\n+\r\n+      setActiveCheckboxes(false);\r\n+      setSelectedCategoryIndex(null);\r\n+   };\r\n+\r\n+   const isTaskAssigned = (task) => {\r\n+      /*return Object.values(assignedTasks).some(\r\n+         tasksInCategory => tasksInCategory.includes(task)\r\n+      );*/\r\n+      return Object.values(assignedTasks).flat().includes(task);\r\n+   };\r\n+\r\n+   // Remover tarea de la categoría\r\n+   const handleTaskRemove = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+      // Asegúrate de que el estado del checkbox refleje los cambios\r\n+      setTasks(prevTasks =>\r\n+         prevTasks.map(t =>\r\n+            t.id === task.id ? { ...t, isChecked: false } : t\r\n+         )\r\n+      );\r\n+   };\r\n+\r\n+   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n+   const handleTaskChange = (task) => {\r\n+      if (task.isChecked) {\r\n+         handleTaskRemove(task, selectedCategoryIndex);\r\n+      } else {\r\n+         handleTaskSelect(task);\r\n+      }\r\n+   };\r\n+\r\n+   // Mover tarea a la siguiente categoría\r\n+   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n+      const newAssignedTasks = { ...assignedTasks };\r\n+      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n+\r\n+      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n+      if (!newAssignedTasks[nextCategoryIndex]) {\r\n+         newAssignedTasks[nextCategoryIndex] = [];\r\n+      }\r\n+      newAssignedTasks[nextCategoryIndex].push(task);\r\n+      setAssignedTasks(newAssignedTasks);\r\n+   };\r\n+\r\n+   return (\r\n+      <div className=\"columns p-4\">\r\n+         <Task\r\n+            toggleModalOpen={() => { }}\r\n+            activeCheckboxes={activeCheckboxes}\r\n+            handleTaskChange={handleTaskChange}\r\n+            tasks={tasks}\r\n+         />\r\n+         <div className=\"column\" id=\"panel-board\">\r\n+            <div className=\"box header\">\r\n+               <h2 className=\"title\">Tablero Kanban</h2>\r\n+               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n+            </div>\r\n+            <div className='box tableroKanban'>\r\n+               <div className=\"table-container is-fullwidth\">\r\n+                  <table className=\"table is-fullwidth table-kanban\">\r\n+                     <thead>\r\n+                        <tr>\r\n+                           {categoryNames.map((name, index) => (\r\n+                              <th key={index} style={{\r\n+                                 textAlign: 'center',\r\n+                                 backgroundColor: '#EBECF0',\r\n+                                 height: '30px',\r\n+                                 verticalAlign: 'middle'\r\n+                              }}>\r\n+                                 {name || `Categoría ${index + 1}`}\r\n+                              </th>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </thead>\r\n+                     <tbody>\r\n+                        <tr>\r\n+                           {categoryNames.map((_, index) => (\r\n+                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n+                                 <div className='pb-4'>\r\n+                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n+                                       <span className='has-text-primary-20-invert'>+</span>\r\n+                                    </button>\r\n+                                 </div>\r\n+                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n+                                    <div\r\n+                                       key={taskIndex}\r\n+                                       className='task-box-2'\r\n+                                       onClick={() => handleTaskRemove(task, index)}\r\n+                                       onContextMenu={(e) => {\r\n+                                          e.preventDefault();\r\n+                                          handleTaskMoveToNext(task, index);\r\n+                                       }}\r\n+                                    >\r\n+                                       <span className='subtitle is-6'>{task.title}</span>\r\n+                                    </div>\r\n+                                 ))}\r\n+                              </td>\r\n+                           ))}\r\n+                        </tr>\r\n+                     </tbody>\r\n+                  </table>\r\n+               </div>\r\n+            </div>\r\n+         </div>\r\n+         {isModalCatOpen && (\r\n+            <div className=\"modal is-active\">\r\n+               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n+               <div className=\"modal-card\">\r\n+                  <header className=\"modal-card-head\">\r\n+                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n+                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n+                  </header>\r\n+                  <section className=\"modal-card-body\">\r\n+                     <div className=\"field\">\r\n+                        <label className=\"label\">Cantidad de Categorías</label>\r\n+                        <div className=\"control \">\r\n+                           <input\r\n+                              className=\"input is-text\"\r\n+                              type=\"number\"\r\n+                              value={categoryCount}\r\n+                              onChange={handleCategoryCountChange}\r\n+                              min=\"3\"\r\n+                           />\r\n+                        </div>\r\n+                     </div>\r\n+                     <div className=\"columns is-multiline\">\r\n+                        {categoryNames.map((name, index) => (\r\n+                           <div key={index} className=\"column is-half\">\r\n+                              <div className=\"field\">\r\n+                                 <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n+                                 <div className=\"control\">\r\n+                                    <input\r\n+                                       className=\"input\"\r\n+                                       type=\"text\"\r\n+                                       value={name}\r\n+                                       onChange={(event) => handleCategoryNameChange(index, event)}\r\n+                                       placeholder={`Categoría ${index + 1}`}\r\n+                                    />\r\n+                                 </div>\r\n+                              </div>\r\n+                           </div>\r\n+                        ))}\r\n+                     </div>\r\n+                  </section>\r\n+                  <footer className=\"modal-card-foot\">\r\n+                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n+                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n+                  </footer>\r\n+               </div>\r\n+            </div>\r\n+         )}\r\n+      </div>\r\n+   );\r\n+}\r\n"
                },
                {
                    "date": 1723598864190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,260 +87,8 @@\n       }\r\n       newAssignedTasks[selectedCategoryIndex].push(task);\r\n \r\n       setAssignedTasks(newAssignedTasks);\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: true } : t\r\n-         )\r\n-      );\r\n-\r\n-      setActiveCheckboxes(false);\r\n-      setSelectedCategoryIndex(null);\r\n-   };\r\n-\r\n-   const isTaskAssigned = (task) => {\r\n-      /*return Object.values(assignedTasks).some(\r\n-         tasksInCategory => tasksInCategory.includes(task)\r\n-      );*/\r\n-      return Object.values(assignedTasks).flat().includes(task);\r\n-   };\r\n-\r\n-   // Remover tarea de la categoría\r\n-   const handleTaskRemove = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-      // Asegúrate de que el estado del checkbox refleje los cambios\r\n-      setTasks(prevTasks =>\r\n-         prevTasks.map(t =>\r\n-            t.id === task.id ? { ...t, isChecked: false } : t\r\n-         )\r\n-      );\r\n-   };\r\n-\r\n-   // Modificación en el checkbox para que esté vinculado al estado de la tarea\r\n-   const handleTaskChange = (task) => {\r\n-      if (task.isChecked) {\r\n-         handleTaskRemove(task, selectedCategoryIndex);\r\n-      } else {\r\n-         handleTaskSelect(task);\r\n-      }\r\n-   };\r\n-\r\n-   // Mover tarea a la siguiente categoría\r\n-   const handleTaskMoveToNext = (task, categoryIndex) => {\r\n-      const newAssignedTasks = { ...assignedTasks };\r\n-      newAssignedTasks[categoryIndex] = newAssignedTasks[categoryIndex].filter(t => t !== task);\r\n-\r\n-      const nextCategoryIndex = (categoryIndex + 1) % categoryCount;\r\n-      if (!newAssignedTasks[nextCategoryIndex]) {\r\n-         newAssignedTasks[nextCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[nextCategoryIndex].push(task);\r\n-      setAssignedTasks(newAssignedTasks);\r\n-   };\r\n-\r\n-   return (\r\n-      <div className=\"columns p-4\">\r\n-         <Task\r\n-            toggleModalOpen={() => { }}\r\n-            activeCheckboxes={activeCheckboxes}\r\n-            handleTaskChange={handleTaskChange}\r\n-            tasks={tasks}\r\n-         />\r\n-         <div className=\"column\" id=\"panel-board\">\r\n-            <div className=\"box header\">\r\n-               <h2 className=\"title\">Tablero Kanban</h2>\r\n-               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n-            </div>\r\n-            <div className='box tableroKanban'>\r\n-               <div className=\"table-container is-fullwidth\">\r\n-                  <table className=\"table is-fullwidth table-kanban\">\r\n-                     <thead>\r\n-                        <tr>\r\n-                           {categoryNames.map((name, index) => (\r\n-                              <th key={index} style={{\r\n-                                 textAlign: 'center',\r\n-                                 backgroundColor: '#EBECF0',\r\n-                                 height: '30px',\r\n-                                 verticalAlign: 'middle'\r\n-                              }}>\r\n-                                 {name || `Categoría ${index + 1}`}\r\n-                              </th>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </thead>\r\n-                     <tbody>\r\n-                        <tr>\r\n-                           {categoryNames.map((_, index) => (\r\n-                              <td key={index} style={{ height: '80vh', textAlign: 'center' }}>\r\n-                                 <div className='pb-4'>\r\n-                                    <button className=\"button is-primary is-rounded is-small\" id=\"plus\" style={{ opacity: 0.7 }} onClick={() => handlePlusClick(index)}>\r\n-                                       <span className='has-text-primary-20-invert'>+</span>\r\n-                                    </button>\r\n-                                 </div>\r\n-                                 {assignedTasks[index] && assignedTasks[index].map((task, taskIndex) => (\r\n-                                    <div\r\n-                                       key={taskIndex}\r\n-                                       className='task-box-2'\r\n-                                       onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n-                                    >\r\n-                                       <span className='subtitle is-6'>{task.title}</span>\r\n-                                    </div>\r\n-                                 ))}\r\n-                              </td>\r\n-                           ))}\r\n-                        </tr>\r\n-                     </tbody>\r\n-                  </table>\r\n-               </div>\r\n-            </div>\r\n-         </div>\r\n-         {isModalCatOpen && (\r\n-            <div className=\"modal is-active\">\r\n-               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n-               <div className=\"modal-card\">\r\n-                  <header className=\"modal-card-head\">\r\n-                     <p className=\"modal-card-title\">Tablero Kanban</p>\r\n-                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n-                  </header>\r\n-                  <section className=\"modal-card-body\">\r\n-                     <div className=\"field\">\r\n-                        <label className=\"label\">Cantidad de Categorías</label>\r\n-                        <div className=\"control \">\r\n-                           <input\r\n-                              className=\"input is-text\"\r\n-                              type=\"number\"\r\n-                              value={categoryCount}\r\n-                              onChange={handleCategoryCountChange}\r\n-                              min=\"3\"\r\n-                           />\r\n-                        </div>\r\n-                     </div>\r\n-                     <div className=\"columns is-multiline\">\r\n-                        {categoryNames.map((name, index) => (\r\n-                           <div key={index} className=\"column is-half\">\r\n-                              <div className=\"field\">\r\n-                                 <label className=\"label\">{`Nombre de Categoría ${index + 1}`}</label>\r\n-                                 <div className=\"control\">\r\n-                                    <input\r\n-                                       className=\"input\"\r\n-                                       type=\"text\"\r\n-                                       value={name}\r\n-                                       onChange={(event) => handleCategoryNameChange(index, event)}\r\n-                                       placeholder={`Categoría ${index + 1}`}\r\n-                                    />\r\n-                                 </div>\r\n-                              </div>\r\n-                           </div>\r\n-                        ))}\r\n-                     </div>\r\n-                  </section>\r\n-                  <footer className=\"modal-card-foot\">\r\n-                     <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>&nbsp;\r\n-                     <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n-                  </footer>\r\n-               </div>\r\n-            </div>\r\n-         )}\r\n-      </div>\r\n-   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import axios from 'axios';\r\n-import { useParams } from 'react-router-dom';\r\n-import { Task } from './Task';\r\n-\r\n-export const TaskBoard = () => {\r\n-   //FILTRO DE TAREAS POR SPACE\r\n-   const { spaceId } = useParams(); // Obtener spaceId de la URL\r\n-   const [tasks, setTasks] = useState([]);\r\n-\r\n-   const fetchTasks = async () => {\r\n-      try {\r\n-         const response = await axios.get(`http://localhost:3000/tasks?spaceId=${spaceId}`);\r\n-         setTasks(response.data);\r\n-         //console.log(response.data);\r\n-      } catch (error) {\r\n-         console.error(\"Error obteniendo las tareas:\", error);\r\n-      }\r\n-   };\r\n-\r\n-   useEffect(() => {\r\n-      fetchTasks(); // Cargar tareas\r\n-   }, [spaceId]);\r\n-\r\n-\r\n-   const [isModalOpen, setModalOpen] = useState(false);\r\n-   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n-\r\n-   const toggleModalOpen = () => {\r\n-      setModalOpen(!isModalOpen);\r\n-   }\r\n-   const toggleModalCatOpen = () => {\r\n-      setModalCatOpen(!isModalCatOpen);\r\n-   }\r\n-\r\n-   // Para las categorías del tablero\r\n-   const [categoryCount, setCategoryCount] = useState(3);\r\n-   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n-\r\n-   const handleCategoryCountChange = (event) => {\r\n-      const count = parseInt(event.target.value, 10);\r\n-\r\n-      setCategoryCount(count);\r\n-\r\n-      if (count > categoryNames.length) {\r\n-         const newCategories = [...categoryNames];\r\n-         while (newCategories.length < count) {\r\n-            newCategories.push(\"\");\r\n-         }\r\n-         setCategoryNames(newCategories);\r\n-      } else if (count < categoryNames.length) {\r\n-         setCategoryNames(categoryNames.slice(0, count));\r\n-      }\r\n-   };\r\n-\r\n-   const handleCategoryNameChange = (index, event) => {\r\n-      const newCategories = [...categoryNames];\r\n-      newCategories[index] = event.target.value;\r\n-      setCategoryNames(newCategories);\r\n-   };\r\n-\r\n-   // Para dibujar la tabla según las categorías\r\n-   const handleCreateBoard = () => {\r\n-      // Cerrar el modal\r\n-      toggleModalCatOpen();\r\n-   };\r\n-\r\n-   // Para activar el check de las tareas\r\n-   const [activeCheckboxes, setActiveCheckboxes] = useState(false);\r\n-   const [assignedTasks, setAssignedTasks] = useState({});\r\n-   const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(null);\r\n-\r\n-   const handlePlusClick = (index) => {\r\n-      setActiveCheckboxes(true);\r\n-      setSelectedCategoryIndex(index);\r\n-   };\r\n-\r\n-   const isTaskDisabled = (task) => {\r\n-      // Verifica si la tarea está en cualquier categoría\r\n-      return Object.values(assignedTasks).flat().some(t => t.id === task.id);\r\n-   };\r\n-\r\n-   const handleTaskSelect = (task) => {\r\n-      const newAssignedTasks = { ...assignedTasks }; //Copia del estado (oper propa)\r\n-      if (!newAssignedTasks[selectedCategoryIndex]) {\r\n-         newAssignedTasks[selectedCategoryIndex] = [];\r\n-      }\r\n-      newAssignedTasks[selectedCategoryIndex].push(task);\r\n-\r\n-      setAssignedTasks(newAssignedTasks);\r\n       /*setTasks(prevTasks =>\r\n          prevTasks.map(t =>\r\n             t.id === task.id ? { ...t, isChecked: true } : t\r\n          )\r\n"
                },
                {
                    "date": 1723598878260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,13 +87,15 @@\n       }\r\n       newAssignedTasks[selectedCategoryIndex].push(task);\r\n \r\n       setAssignedTasks(newAssignedTasks);\r\n-      /*setTasks(prevTasks =>\r\n+\r\n+      //Bloqueo y tache\r\n+      setTasks(prevTasks =>\r\n          prevTasks.map(t =>\r\n             t.id === task.id ? { ...t, isChecked: true } : t\r\n          )\r\n-      );*/\r\n+      );\r\n \r\n       setActiveCheckboxes(false);\r\n       setSelectedCategoryIndex(null);\r\n    };\r\n"
                },
                {
                    "date": 1723600676388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,12 +185,9 @@\n                                     <div\r\n                                        key={taskIndex}\r\n                                        className='task-box-2'\r\n                                        onClick={() => handleTaskRemove(task, index)}\r\n-                                       onContextMenu={(e) => {\r\n-                                          e.preventDefault();\r\n-                                          handleTaskMoveToNext(task, index);\r\n-                                       }}\r\n+                                       \r\n                                     >\r\n                                        <span className='subtitle is-6'>{task.title}</span>\r\n                                     </div>\r\n                                  ))}\r\n"
                }
            ],
            "date": 1723478873586,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const TaskBoard = () => {\r\n   const [isModalOpen, setModalOpen] = useState(false);\r\n   const [isModalCatOpen, setModalCatOpen] = useState(false);\r\n\r\n   const toggleModalOpen = () => {\r\n      setModalOpen(!isModalOpen);\r\n   }\r\n   const toggleModalCatOpen = () => {\r\n      setModalCatOpen(!isModalCatOpen);\r\n   }\r\n\r\n   //BD\r\n   const [tasks, setTasks] = useState([]);\r\n   useEffect(() => {\r\n      axios.get('../../db.json')\r\n         .then(response => {\r\n            setTasks(response.data.tasks);\r\n         })\r\n         .catch(error => {\r\n            console.error('Error fetching tasks:', error);\r\n         });\r\n   }, []);\r\n\r\n   //Para las categorías del tablero\r\n   const [categoryCount, setCategoryCount] = useState(3);\r\n   const [categoryNames, setCategoryNames] = useState([\"Por hacer\", \"En proceso\", \"Hecho\"]);\r\n\r\n   const handleCategoryCountChange = (event) => {\r\n      const count = parseInt(event.target.value, 10);\r\n\r\n      setCategoryCount(count);\r\n\r\n      if (count > categoryNames.length) {\r\n         const newCategories = [...categoryNames];\r\n         while (newCategories.length < count) {\r\n            newCategories.push(\"\");\r\n         }\r\n         setCategoryNames(newCategories);\r\n      } else if (count < categoryNames.length) {\r\n         setCategoryNames(categoryNames.slice(0, count));\r\n      }\r\n   };\r\n\r\n   const handleCategoryNameChange = (index, event) => {\r\n      const newCategories = [...categoryNames];\r\n      newCategories[index] = event.target.value;\r\n      setCategoryNames(newCategories);\r\n   };\r\n\r\n   //Para dibujar la tabla según las categorías\r\n   const handleCreateBoard = () => {\r\n      // Cierra el modal después de crear el tablero\r\n      toggleModalCatOpen();\r\n   };\r\n\r\n\r\n\r\n   return (\r\n      <div className=\"columns p-4\">\r\n         <div className=\"column is-one-quarter\" id=\"panel-task\">\r\n            <div className=\"box\">\r\n               <h2 className=\"title is-4\">Listado de Tareas</h2>\r\n               <button className=\"button is-primary is-rounded is-small\" onClick={toggleModalOpen} id=\"plus\"><span className='has-text-primary-20-invert'>+</span></button>\r\n            </div>\r\n            <div className=\"box task-container\">\r\n               {tasks.map(task => (\r\n                  <div key={task.id} className='task-box'>\r\n                     <h2 className='subtitle is-6'>{task.title}</h2>\r\n                  </div>\r\n               ))}\r\n            </div>\r\n         </div>\r\n         {isModalOpen && (\r\n            <div className=\"modal is-active\">\r\n               <div className=\"modal-background\" onClick={toggleModalOpen}></div>\r\n               <div className=\"modal-card\">\r\n                  <header className=\"modal-card-head\">\r\n                     <p className=\"modal-card-title\">Nueva tarea</p>\r\n                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalOpen}></button>\r\n                  </header>\r\n                  <section className=\"modal-card-body\">\r\n                     <div className=\"field\">\r\n                        <label className=\"label\">Título</label>\r\n                        <div className=\"control\">\r\n                           <input className=\"input is-text\" type=\"text\" placeholder=\"Text input\" />\r\n                        </div>\r\n                     </div>\r\n                     <div class=\"field\">\r\n                        <label class=\"label\">Descripción</label>\r\n                        <div class=\"control\">\r\n                           <textarea class=\"textarea is-text\" placeholder=\"Textarea\" rows={2}></textarea>\r\n                        </div>\r\n                     </div>\r\n                     <div className='columns'>\r\n                        <div className='column is-half'>\r\n                           <div class=\"field\">\r\n                              <label class=\"label\">Vencimiento</label>\r\n                              <div class=\"control\">\r\n                                 <input className=\"input is-text\" type=\"date\" placeholder=\"Text input\" />\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div className='column is-half'>\r\n                           <div class=\"field\">\r\n                              <label class=\"label\">Importancia</label>\r\n                              <div class=\"control\">\r\n                                 <div class=\"select is-fullwidth is-text\">\r\n                                    <select>\r\n                                       <option>Urgente</option>\r\n                                       <option>Alta</option>\r\n                                       <option>Media</option>\r\n                                       <option>Baja</option>\r\n                                    </select>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n\r\n\r\n                  </section>\r\n                  <footer className=\"modal-card-foot\">\r\n                     <div className=\"buttons\">\r\n                        <button className=\"button is-success\">Guardar</button>\r\n                        <button className=\"button\" onClick={toggleModalOpen}>Cancelar</button>\r\n                     </div>\r\n                  </footer>\r\n               </div>\r\n            </div>\r\n         )}\r\n\r\n\r\n         <div className=\"column\" id=\"panel-board\">\r\n            <div className=\"box header\">\r\n               <h2 className=\"title\">Tablero Kanban</h2>\r\n               <button className=\"button is-primary\" onClick={toggleModalCatOpen}>Crear</button>\r\n            </div>\r\n            <div className='box'>\r\n               <div className=\"table-container is-fullwidth\">\r\n                  <table className=\"table is-fullwidth table-kanban\">\r\n                     <thead>\r\n                        <tr>\r\n                           {categoryNames.map((name, index) => (\r\n                              <th key={index}>{name || `Categoría ${index + 1}`}</th>\r\n                           ))}\r\n                        </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                        <tr>\r\n                           {categoryNames.map((_, index) => (\r\n                              <td key={index} style={{ height: '80vh' }}></td>\r\n                           ))}\r\n                        </tr>\r\n                     </tbody>\r\n                  </table>\r\n               </div>\r\n            </div>\r\n\r\n         </div>\r\n\r\n         {isModalCatOpen && (\r\n            <div className=\"modal is-active\">\r\n               <div className=\"modal-background\" onClick={toggleModalCatOpen}></div>\r\n               <div className=\"modal-card\">\r\n                  <header className=\"modal-card-head\">\r\n                     <p className=\"modal-card-title\">Categorías del tablero</p>\r\n                     <button className=\"delete\" aria-label=\"close\" onClick={toggleModalCatOpen}></button>\r\n                  </header>\r\n                  <section className=\"modal-card-body\">\r\n                     <div className=\"field\">\r\n                        <label className=\"label\">Cantidad de categorías</label>\r\n                        <div className=\"control pb-4\">\r\n                           <input className=\"input is-text\" type=\"number\" min=\"3\" value={categoryCount} onChange={handleCategoryCountChange} />\r\n                        </div>\r\n\r\n                        <div className=\"field\" style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n                           {categoryNames.map((category, index) => (\r\n                              <div className=\"control\" key={index} style={{ flexGrow: 1 }}>\r\n                                 <input className=\"input is-text\" type=\"text\" value={category} onChange={(event) => handleCategoryNameChange(index, event)}\r\n                                    placeholder={`Categoría ${index + 1}`}\r\n                                 />\r\n                                 <h3>Hola</h3>\r\n                              </div>\r\n                           ))}\r\n                        </div>\r\n\r\n\r\n\r\n                     </div>\r\n                  </section>\r\n                  <footer className=\"modal-card-foot\">\r\n                     <div className=\"buttons\">\r\n                        <button className=\"button is-success\" onClick={handleCreateBoard}>Crear</button>\r\n                        <button className=\"button\" onClick={toggleModalCatOpen}>Cancelar</button>\r\n                     </div>\r\n                  </footer>\r\n               </div>\r\n            </div>\r\n         )}\r\n      </div>\r\n   )\r\n}\r\n"
        }
    ]
}